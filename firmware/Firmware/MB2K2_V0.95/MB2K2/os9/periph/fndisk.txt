 nam fndisk
 ttl Device Driver for FLEXNet on the MB2K2

 use defsfile

Edition  equ 1 Current Edition
Revision equ 1 Current Revision number

NumDrvs set     4               Number of drives

SCHAR   equ     $F0A0           FLEXNet driver send char
RCHAR   equ     $F0A2           FLEXNet driver receive char
ACK     EQU     $06             acknowledge char
NAK     EQU     $15             negative acknowledge char
RDCMD   EQU     $F3             read command (msb set for OS9)
WRCMD   EQU     $F2             write command (msb set for OS9)

 org Drvbeg
 rmb NumDrvs*DrvMem
LSNZERO rmb     1
track   rmb     1
sector  rmb     1
CHKSUM  rmb     2
FNSTA   equ     .

        mod     FNEND,FNNAM,Drivr+Objct,Reent+Revision,FNENT,FNSTA
        fcb     $FF         set all capabilities
FNNAM   fcs     /fndisk/
        fcb     Edition

FNENT   lbra    INIT
        lbra    READ
        lbra    WRITE
        lbra    GETSTA
        lbra    PUTSTA
        lbra    TERM

*****************************
* INIT
*  The remote connection should already be set up from the rmount command
*  FIXME - put a serial link check here
INIT    clr     V.WAKE,U
        lda     #NumDrvs
        tfr 	a,b
        sta     V.NDRV,U
        clr     LSNZERO,U
*
        lda     #$FF
 		leax    DrvBeg,U
ilp     sta     DD.Tot,X
        sta     V.Trak,X
        leax 	DrvMem,x
 		decb             	loop through drives
 		bne 	ilp
        
* serial link check
*
        clrb
INITXIT rts

*****************************
* READ
*  read a sector from disk
*
READ    clr     LSNZERO,U
        bsr     VALID
        bcs     READ99
        lbsr     READS
        tstb
        bne     read99
        tst     LSNZERO,U
        beq     READ90
        lda     PD.DRV,Y
        ldb     #DRVMEM
        mul
        leax    DRVBEG,U
        leax    D,X
        ldy     PD.BUF,Y
        ldb     #DD.SIZ-1
COPLSN0 lda     B,Y
        sta     B,X
        decb
        bpl     COPLSN0
*
READ90  clrb
READ99  rts

*****************************
* WRITE
*  Write a sector to disk
*
WRITE bsr VALID
        bcs     WRIT99
        lbsr     WRITS
        tstb
        bne     writ99
        clrb
WRIT99  rts


*****************************
* VALID
*  validate a sector
*  and set up external registers
*
VALID 		cmpx 	#$0000 		LSN 0?
 			bne 	NOTLSN0
		 	inc 	LSNZERO,U
NOTLSN0 	tfr 	x,d
 			sta 	track,u
 			stb 	sector,u
 			clrb 				no error
 			rts
SECTERR 	comb
			ldb 	#241 sector error
			rts
*
************************
* READS
*  Y=Path Discr.
*
READS 		pshs 	X,Y
NREAD       CLR     CHKSUM,u		clear checksum
            CLR     (CHKSUM+1),u
*	
            LDA     #rdcmd			Send read sector command
            JSR     [SCHAR]
            BCC     NRD_DNR			if timeout, then flag drive not ready
*
            lda 	PD.DRV,Y		extract drive num
            JSR     [SCHAR]
            BCC     NRD_DNR
*
            lda     track,u        	send track value
            JSR     [SCHAR]
            BCC     NRD_DNR
*
            lda     sector,u        send sector value
            JSR     [SCHAR]
            BCC     NRD_DNR
*
* transfer 256 bytes
            ldy 	PD.BUF,Y
            CLRB
NREAD1      JSR     [RCHAR]           read byte
            BCC     NRD_DNR         if timeout, then flag drive not ready
            STA     ,y+
            ADDA    (CHKSUM+1),u        update checksum
            STA     (CHKSUM+1),u
            BCC     NREAD2
            INC     CHKSUM,u
NREAD2      DECB
            BNE     NREAD1
*
* compare checksums
            JSR     [RCHAR]           get checksum msb
            BCC     NRD_DNR
            PSHS    A
            JSR     [RCHAR]           get checksum lsb
            BCC     NRD_DNR
            TFR     A,B
            PULS    A
            CMPD    CHKSUM,u          compare checksums
            BNE     NRD_ERR         if checksum error, then flag crc read error
*
            LDA     #ACK            no checksum error, send ACK char
            JSR     [SCHAR]
            BCC     NRD_DNR
            CLRB                    all OK, flag no error
            BRA     NRD_END
*
NRD_DNR     LDB     #246            flag drive not ready
            BRA     NRD_END
*
NRD_ERR     LDA     #NAK            send NAK
            JSR     [SCHAR]
            BCC     NRD_DNR
            LDB     #244             flag crc read error
*
NRD_END     puls    X,Y,PC

************************
* WRITS
*  Y=Path Discr.
*
WRITS 		pshs 	X,Y
*
* write sector to remote drive
*
            CLR     CHKSUM,u        clear checksum
            CLR     (CHKSUM+1),u
*
            LDA     #wrcmd          Send write sector command
            JSR     [SCHAR]
            BCC     NRD_DNR         if timeout, then flag drive not ready
*
            lda 	PD.DRV,Y		extract drive num
            JSR     [SCHAR]
            BCC     NRD_DNR
*
            lda     track,u         send track
            JSR     [SCHAR]
            BCC     NRD_DNR
*
            lda     sector,u        send sector
            JSR     [SCHAR]
            BCC     NRD_DNR
*
* transfer 256 bytes
 			ldy 	PD.BUF,Y
            CLRB
NWRITE1     LDA     ,y+
            JSR     [SCHAR]         write byte
            BCC     NRD_DNR         if timeout, then flag drive not ready
            ADDA    (CHKSUM+1),u    update checksum
            STA     (CHKSUM+1),u
            BCC     NWRITE2
            INC     CHKSUM,u
NWRITE2     DECB
            BNE     NWRITE1
*
* compare checksums
            LDA     CHKSUM,u
            JSR     [SCHAR]           send checksum msb
            BCC     NRD_DNR
            LDA     (CHKSUM+1),u
            JSR     [SCHAR]           send checksum lsb
            BCC     NRD_DNR
*
            JSR     [RCHAR]           get checksum response
            BCC     NRD_DNR
            CMPA    #ACK
            BNE     NWR_ERR         if checksum error, then flag write error
*
            CLRB                    all OK, flag no error
            BRA     NWR_END
*
NWR_ERR     LDB     #245             flag write error
*
NWR_END     puls 	X,Y,PC



**************************
* GETSTA
*  get device status
*
GETSTA equ *

Unknown comb
 ldb #E$UnkSVC
 rts

**************************
* PUTSTA
*  Set device Status
*
PUTSTA cmpb #SS.Reset
 beq PUTSTA90
 cmpb #SS.WTrk
 bne Unknown

PUTSTA90 clrb
 rts

*****************************
* TERM
*  terminate Driver
*
TERM rts

 emod
FNEND equ *

******************************************
* FNdisk Discriptor modules
*
 nam h0
 ttl Drive Descriptor module

 mod D0End,D0Nam,DEVIC+OBJCT,REENT+1,D0Mgr,D0Drv

 fcb $FF mode byte (DIR.+SHARE.+PREAD.+PWRIT.+UPDAT.+EXEC.+PEXEC.)
 fcb $FF IOBlock address bits 23:16 (unused)
 fdb $0 hardware address is used as a proxy for the drive number (0-3)
 fcb D0Nam-*-1 option byte count
 fcb $1 Rbf device
 fcb 0 Drive number
 fcb 03 6ms Step rate
 fcb $80 Standard OS9 Winchester drive
 fcb 0 Single density
 fdb 192 number of tracks
 fcb 1 number of sides
 fcb 1 don't verify any writes
 fdb 30 sectors per track
 fdb 30 sectors on track 0, side 0
 fcb 1 sector interleave factor
 fcb 1 sector allocation size
D0Nam fcs "H0"
D0Mgr fcs "RBF"
D0Drv fcs "fndisk"
 emod
D0End equ *
*
 nam h1
 ttl Drive Descriptor module

 mod D1End,D1Nam,DEVIC+OBJCT,REENT+1,D1Mgr,D1Drv

 fcb $FF mode byte (DIR.+SHARE.+PREAD.+PWRIT.+UPDAT.+EXEC.+PEXEC.)
 fcb $FF IOBlock address bits 23:16 (unused)
 fdb $1 hardware address is used as a proxy for the drive number (0-3)
 fcb D1Nam-*-1 option byte count
 fcb $1 Rbf device
 fcb 1 Drive number
 fcb 03 6ms Step rate
 fcb $80 Standard OS9 Winchester drive
 fcb 0 Single density
 fdb 192 number of tracks
 fcb 1 number of sides
 fcb 1 don't verify any writes
 fdb 30 sectors per track
 fdb 30 sectors on track 0, side 0
 fcb 1 sector interleave factor
 fcb 1 sector allocation size
D1Nam fcs "H1"
D1Mgr fcs "RBF"
D1Drv fcs "fndisk"
 emod
D1End equ *
*
 nam h2
 ttl Drive Descriptor module
*
 mod D2End,D2Nam,DEVIC+OBJCT,REENT+1,D2Mgr,D2Drv
*
 fcb $FF mode byte (DIR.+SHARE.+PREAD.+PWRIT.+UPDAT.+EXEC.+PEXEC.)
 fcb $FF IOBlock address bits 23:16 (unused)
 fdb $2 hardware address is used as a proxy for the drive number (0-3)
 fcb D2Nam-*-1 option byte count
 fcb $1 Rbf device
 fcb 2 Drive number
 fcb 03 6ms Step rate
 fcb $80 Standard OS9 Winchester drive
 fcb 0 Single density
 fdb 192 number of tracks
 fcb 1 number of sides
 fcb 1 don't verify any writes
 fdb 30 sectors per track
 fdb 30 sectors on track 0, side 0
 fcb 1 sector interleave factor
 fcb 1 sector allocation size
D2Nam fcs "H2"
D2Mgr fcs "RBF"
D2Drv fcs "fndisk"
 emod
D2End equ *
*
 nam h3
 ttl Drive Descriptor module
*
 mod D3End,D3Nam,DEVIC+OBJCT,REENT+1,D3Mgr,D3Drv
*
 fcb $FF mode byte (DIR.+SHARE.+PREAD.+PWRIT.+UPDAT.+EXEC.+PEXEC.)
 fcb $FF IOBlock address bits 23:16 (unused)
 fdb $3 hardware address is used as a proxy for the drive number (0-3)
 fcb D3Nam--1 option byte count
 fcb $1 Rbf device
 fcb 3 Drive number
 fcb 03 6ms Step rate
 fcb $80 Standard OS9 Winchester drive
 fcb 0 Single density
 fdb 192 number of tracks
 fcb 1 number of sides
 fcb 1 don't verify any writes
 fdb 30 sectors per track
 fdb 30 sectors on track 0, side 0
 fcb 1 sector interleave factor
 fcb 1 sector allocation size
D3Nam fcs "H3"
D3Mgr fcs "RBF"
D3Drv fcs "fndisk"
 emod
D3End equ *
*
 end

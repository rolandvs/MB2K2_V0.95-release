                       NAM   Mon09 
                       STTL             Ver 6.2    D.A.Rumball    2023-05-20 
                       OPT   PAG 


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 1
Ver 6.2    D.A.Rumball    2023-05-20

                      ****************************
                      ****************************
                      ** MON09  Ver 6.2         **
                      ** D.A.Rumball 2023-05-20 **
                      ****************************
                      ****************************
                      *
                      ******************************************
                      * This program is the core section of a  *
                      * general 6809(E) system monitor. It can *
                      * be configured to a particular system   *
                      * at assembly time by including on the   *
                      * source disk library files containing   *
                      * the system specific code for the disk  *
                      * and console drivers and extra commands *
                      * and subroutines. These files are:-     *
                      *  SCRATCH.....Contains RMB's for extra  *
                      *              temp storage.             *
                      *  FDB.........Contains the jump table   *
                      *              entries for extra subs.   *
                      *  COMTABLE....Contains the extra jump   *
                      *              table entries for commands*
                      *  MINIT.......Contains the power on     *
                      *              and reset code.           *
                      *  CONSOLE.....Contains the console      *
                      *              driver code.              *
                      *  DISK........Contains the disk driver  *
                      *              code.                     *
                      *  SUBS........Contains the code for any *
                      *              extra system subroutines. *
                      *  BOOT........Contains the boot routine.*
                      *  COMMANDS....Contains the code for any *
                      *              extra commands.           *
                      ******************************************
                      *
                      *
                      *
                      **************************
                      * Common System Equates  *
                      **************************
                      *
                      PROM EQU $E000 Eprom starting address.
                      RAM EQU  $DE00 Scratch ram + stack space.
                      IO EQU $FF00 base address.
                      SSTACK EQU (RAM+127-16) Top of system stack.
                      SCRAT EQU (RAM+384) Start of scratch space.
                      *
                      DELCON  EQU  400           Delay constant (cpu clk in MHz * 50) (400 for 8MHz clk)
                      *
                      SECS    EQU  00            RTC clock register equates
                      MINS    EQU  02
                      HOURS   EQU  04
                      DAYOW   EQU  06            day of week
                      DAY     EQU  07
                      MONTH   EQU  08
                      YEAR    EQU  09

                      *
                      **************************
                      * scratch storage space  *
                      **************************


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 2
Ver 6.2    D.A.Rumball    2023-05-20

                       ORG (RAM+128)
                      BUFFER RMB 256 Floppy interface sector buffer.
                       ORG SCRAT
                      STACK RMB 2 User system stack.
                      *
                      NMIV RMB 2 NMI interrupt vector.
                      IRQV RMB 2 IRQ interrupt vector.
                      FIRQV RMB 2 FIRQ interrupt vector.
                      SWI2V RMB 2 SWI2 interrupt vector.
                      SWI3V RMB 2 SWI3 interrupt vector.
                      *
                      IPORT RMB 1 Active input port.
                      OPORT RMB 1 Active output port.
                      *
                      DRIVE RMB 1 Format drive value.
                      TRACK RMB 1 Format track value.
                      SECTOR RMB 1 Format sector value.
                      *
                      TEMP RMB 1
                      XTEMP RMB 2
                      YTEMP RMB 2
                      TTO RMB 2
                      RNDM RMB 4 Random number storage.
                      WARMS RMB 1 Warm start flag.
                      *
                      DDSTAB RMB 4 Disc driver type table.
                      REAVEC RMB 2 Disc driver jump tables.
                      WRIVEC RMB 2
                      VERVEC RMB 2
                      RSTVEC RMB 2
                      DRVVEC RMB 2
                      CHKVEC RMB 2
                      QUIVEC RMB 2
                      INIVEC RMB 2
                      WARVEC RMB 2
                      SEEVEC RMB 2
                      *********************************************
                      * Extra scratch space for system dependant  *
                      * routines fits here.                       *
                      *********************************************
                      RTCFAIL RMB 1 RTC fail flag.
                      CURDRV RMB 1 Active floppy drive.
                      XCOORD RMB 2 Cursor X value.
                      YCOORD RMB 2 Cursor Y Value.
                      PART1 RMB 4 Display partition one.
                      PART2 RMB 4 Display partition two.
                      GPARAM RMB 8 Parameter ram contents.
                      GMODE RMB 1 GDC mode register contents.
                      GZOOM RMB 1 Display + write zoom values.
                      GFIGS RMB 1 Figs 1st parameter value.
                      DC RMB 2
                      D0 RMB 2
                      D2 RMB 2
                      D1 RMB 2
                      DM RMB 2
                      CONST RMB 1
                      ROW RMB 1
                      COL RMB 1
                      MAXCOL RMB 1
                      MAXROW RMB 1
                      CCOL RMB 1


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 3
Ver 6.2    D.A.Rumball    2023-05-20

                      CROW RMB 1
                      BCOL RMB 1
                      BROW RMB 1
                      ATTRI RMB 1
                      CSPACE RMB 1
                      CHARTAB RMB 2
                      CURSOR RMB 2
                      OFFSET RMB 2
                      CZOOM RMB 1
                      CTYPE RMB 1
                      ESCFLG RMB 1
                      TS1 RMB 2
                      TS2 RMB 2
                      TL1 RMB 2
                      TL2 RMB 2
                      DEN RMB 1 Drive density value.
                      DEN1 RMB 1 Other drive density value.
                      STEP RMB 1 Drive step rate.
                      STEP0 RMB 1 Drive 0 step rate.
                      FLASH RMB 2
                      CFLAG RMB 1
                      *
                      * the following were not in the MB2 ROM.
                      CHKSUM RMB 2             FlexNet driver checksum
                      BRKPNT RMB 1             saved instruction byte from breakpoint
                      PDWPRT RMB 1             promdisk write protect flag (0 = protected)
                      TRIES RMB 1              RM command timeout try counter
                      *
                      *
                       ORG PROM+$1000 code in this 4K region will not be mapped out when booting
                      ********************************************
                      * Table of jump addresses for subroutines. *
                      * To use these subroutines use the         *
                      * indirect jump to subroutine thus:-       *
                      *        DELAY EQU $F014                   *
                      *        JSR [DELAY]                       *
                      ********************************************
 F000 F0A4             FDB RESET Cold start.
 F002 F0EF             FDB CONTRL Warm  start.
 F004 F183             FDB INCH1 Input char without an echo.
 F006 F19C             FDB INCH Input char.
 F008 F161             FDB STATUS Check for char.
 F00A F19E             FDB OUTCH Output char.
 F00C F4C7             FDB PDATA1 Print string terminated by hex(04).
 F00E F4BB             FDB PCRLF Print a cr followed by a lf.
 F010 F4CE             FDB PSTRNG PCRLF followed by PDATA1.
 F012 F160             FDB DUMMY No init code.
 F014 F4EB             FDB DELAY Delay for (XREG) m/S.
 F016 F4FC             FDB BADDR Get a four digit hex address into X.
 F018 F507             FDB BYTE Get a two hex digit number into A.
 F01A F52C             FDB INHEX Get a one digit hex char into A.
 F01C F54C             FDB OUT2H Output two hex chars pointed to by X.
 F01E F556             FDB OUT2HS OUT2H plus a space.
 F020 F554             FDB OUT4HS Output four hex chars etc.
 F022 F51D             FDB OUTHR Output right hex digit in A.
 F024 F519             FDB OUTHL Output left hex digit in A.
 F026 F558             FDB OUTS Output a space.
 F028 F55D             FDB RANDOM Returns a random number in the range 0-255.
 F02A F4D3             FDB PRINTA Output the contents of A.
 F02C F4DF             FDB PRINTX Output the contents of X.
 F02E F448             FDB READ Read sector routine.


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 4
Ver 6.2    D.A.Rumball    2023-05-20

 F030 F44C             FDB WRITE Write sector routine.
 F032 F450             FDB VERIFY Verify sector routine.
 F034 F454             FDB RST Restore to track 00.
 F036 F45D             FDB DRV Drive select.
 F038 F490             FDB CHKRDY Check for drive ready.
 F03A F494             FDB QUICK Quick check for drive ready.
 F03C F498             FDB DINIT Drive cold start.
 F03E F4B0             FDB WARM Drive warm start.
 F040 F4B4             FDB SEEK Seek to track.
                      *************************************
                      * Extra FDB'S for system dependant  *
                      * subroutines fit here.             *
                      *************************************
 F042 F5BC             FDB GETTIM Get time string from RTC.
 F044 F5DA             FDB PUTTIM Put time string to RTC.
 F046 F5C9             FDB GETRTC Get a byte from the RTC.
 F048 F5E7             FDB PUTRTC Put a byte to the RTC.
 F04A F5FC             FDB BEEP Sound a 100ms tone.
 F04C F620             FDB GCOM Send command to GDC.
 F04E F632             FDB GPRM Send parameter to GDC.
 F050 F641             FDB GPRMI Get parameter from GDC.
 F052 F64C             FDB MASK Load mask register.
 F054 F65E             FDB SETPEN Define drawing mode.
 F056 F675             FDB SETPAT Define graphics pattern.
 F058 F688             FDB FIGSF Start figure drawing.
 F05A F6AD             FDB FIGSG Start graphics drawing.
 F05C F6D6             FDB SETPAR Define display partitions.
 F05E F738             FDB SETCRG Set graphics cursor.
 F060 F758             FDB GETCRG Get graphics cursor.
 F062 F9BF             FDB SETCRT Set text cursor.
 F064 F9DC             FDB GETCRT Get text cursor.
 F066 F7A2             FDB OFF Turn display off.
 F068 F7AE             FDB ON Turn display on.
 F06A F7BA             FDB GRAPH Set display to graphics.
 F06C F9FB             FDB TEXT Set display to text
 F06E F7D5             FDB MODE Set GDC mode.
 F070 F7EC             FDB ZOOM Set zoom factors.
 F072 F803             FDB FILL Area fill routine.
 F074 F844             FDB CLEARX Clear (X) display words.
 F076 F822             FDB CLEARG Clear graphics display.
 F078 FA19             FDB CLEART Clear text display.
 F07A F879             FDB GDCINIT Initialise GDC.
 F07C FA73             FDB GDCOUT Output a character.
 F07E F1BD             FDB INKEY Get a character from the keyboard.
 F080 F8CA             FDB POINT Plot a point.
 F082 F8D6             FDB LINE Plot a line.
 F084 F902             FDB RECT Plot a rectangle.
 F086 F92F             FDB CIRCLE Plot a circle.
 F088 F980             FDB ARC Plot an arc.
 F08A FA48             FDB CLINK Link in new char set.
 F08C F726             FDB SYNC Sync to vertical blanking.
                       *
                       * the following routines were not in the MB2 ROM.
 F08E F580             FDB  TOUPPER   convert ASCII char to upper case
 F090 F58B             FDB  BCD2BIN   convert BCD value to binary
 F092 F5A4             FDB  BIN2BCD   convert binary value to BCD
                      *
 F094 F160             FDB DUMMY
 F096 F160             FDB DUMMY
 F098 F160             FDB DUMMY
 F09A F160             FDB DUMMY


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 5
Ver 6.2    D.A.Rumball    2023-05-20

 F09C F160             FDB DUMMY
 F09E F160             FDB DUMMY
                      *
 F0A0 F424             FDB  SCHAR      FlexNet driver send char
 F0A2 F405             FDB  RCHAR      FlexNet driver receive char
                      *
                       
                       
                      *
                      **************************************
                      * Start of monitor  Entered on reset *
                      **************************************
                      * cold start
 F0A4 B6DF9C          RESET LDA WARMS
 F0A7 81AA             CMPA #$AA Test for power down.
 F0A9 2710             BEQ U1
                      *
 F0AB 4F               CLRA
 F0AC 8EDF80           LDX #SCRAT
 F0AF A780            L1 STA ,X+ Clear out scratch storage.
 F0B1 8CE000           CMPX #(RAM+512)
 F0B4 26F9             BNE L1
 F0B6 86AA             LDA #$AA
 F0B8 B7DF9C           STA WARMS
                      *
 F0BB 10CEDE6F        U1 LDS #SSTACK Set initial stack pointer.
 F0BF 10FFDF80         STS STACK   Same for user stack location.
                      *
 F0C3 108EF129         LDY #UNEXP set MON09 int vectors
 F0C7 8EDF82           LDX #NMIV
 F0CA 10AF81          U1L STY ,X++
 F0CD 8CDF8C           CMPX #NMIV+10
 F0D0 26F8             BNE U1L
                      *
                      ***********************************
                      * System dependant init code goes *
                      * here. It should set the initial *
                      * input and output ports then     *
                      * check for auto boot.            *
                      ***********************************
                      * MB2K2 specific init
                      * Set up PIA, /DDEN and MAP bits.
 F0D2 8604             LDA #4
 F0D4 B7FF02           STA SYSREG
                      * 
                      * flush ACIA buffers
 F0D7 86FF             LDA #$FF
 F0D9 B7FF09           STA ACIAC1
 F0DC B7FF05           STA ACIAC2
                      *
                      * clear any timer flag
 F0DF B6FF40           lda $FF40
                      * disable writing to PROMdisk
 F0E2 4F               clra
 F0E3 B7DFFE           sta PDWPRT
                      *
 F0E6 7EE0C7           JMP MINIT
                      *
 F0E9 8EE000          MINITR LDX #HDR Print header after reset.
 F0EC BDF4C7           JSR PDATA1
                      *


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 6
Ver 6.2    D.A.Rumball    2023-05-20

                      * warm start
 F0EF B6FF02          CONTRL LDA SYSREG Map in bottom 4k of eprom.
 F0F2 8A04             ORA #4
 F0F4 B7FF02           STA SYSREG
                      *
 F0F7 8EE036           LDX #PROMPT
 F0FA BDF4C7           JSR PDATA1
 F0FD BDF19C           JSR INCH Get two byte command into Y.
 F100 BDF580           JSR TOUPPER
 F103 1F89             TFR A,B
 F105 BDF19C           JSR INCH
 F108 BDF580           JSR TOUPPER
 F10B 1E89             EXG A,B
 F10D 1F02             TFR D,Y
 F10F 8EE159          PARSE LDX #COMTAB Point to start of command table.
 F112 10AC81          NEXT CMPY ,X++ Look for match.
 F115 2602             BNE NOPE No match.
 F117 6E94             JMP [,X]  Found it, so jump to routine.
 F119 3002            NOPE LEAX 2,X If no match then jump over address.
 F11B A684             LDA ,X Check for end of table.
 F11D 81FF             CMPA #$FF
 F11F 26F1             BNE NEXT If not the end then try next entry.
 F121 8EE03B          WHAT LDX #NOTTHS No match so print message.
 F124 BDF4C7           JSR PDATA1
 F127 20C6             BRA CONTRL
                      *
 F129 8EE04F          UNEXP   LDX     #UNMESS         Unexpected interrupt   Don't Panic!
 F12C BDF4CE                          JSR     PSTRNG
 F12F 1A50                            ORCC    #%01010000      Set interrupt masks.
 F131 7EF0A4                          JMP     RESET
                      *
                      * Interrupt vector redirections for MON09/FLEX
 F134 6E9FDF82        FNMI    JMP     [NMIV]
 F138 6E9FDF84        FIRQ    JMP     [IRQV]
 F13C 6E9FDF86        FFIRQ   JMP     [FIRQV]
 F140 6E9FDF88        FSWI2   JMP     [SWI2V]
 F144 6E9FDF8A        FSWI3   JMP     [SWI3V]
                      *
                      * Interrupt vector redirections for OS9
 F148 6E9F002C        OSWI3   JMP     [$002C]
 F14C 6E9F002E        OSWI2   JMP     [$002E]
 F150 6E9F0030        OFIRQ   JMP     [$0030]
 F154 6E9F0032        OIRQ    JMP     [$0032]
 F158 6E9F0034        OSWI    JMP     [$0034]
 F15C 6E9F0036        ONMI    JMP     [$0036]
                      *
 F160 39              DUMMY RTS
                      *
                      *****************************************************
                      * Console drivers                                   *
                      * ---------------                                   *
                      * The system dependant code for the console drivers *
                      * fits here. The entries in the jump tables INITAB  *
                      * INTAB,OUTTAB and STATAB should be changed to suit *
                      * these routines. For a description of the drivers  *
                      * for an 6850 acia see section 3 of the general     *
                      * Flex adaptation guide (pp6-8).                    *
                      *****************************************************
                      *

                      *


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 7
Ver 6.2    D.A.Rumball    2023-05-20

                      * Status routine.
                      * Entry: no parameters.
                      * Exit:  (Z)=0 if character ready.
 F161 3416            STATUS PSHS D,X
 F163 7DDF8D           TST OPORT
 F166 2610             BNE FLASH1
 F168 BEDFF8           LDX FLASH
 F16B 2606             BNE FLASH2
 F16D BDFA7F           JSR CURS
 F170 8E1770           LDX #6000
 F173 301F            FLASH2 LEAX -1,X
 F175 BFDFF8           STX FLASH
 F178 8EF1B7          FLASH1 LDX #STATAB
 F17B F6DF8C           LDB IPORT
 F17E 58               ASLB
 F17F AD95             JSR [B,X]
 F181 3596             PULS D,X,PC
                      *
                      * Input character with no echo and  input.
                      * Entry: no parameters.
                      * Exit:  (A) = character.
 F183 3414            INCH1 PSHS B,X
 F185 8DDA            INCH1A BSR STATUS
 F187 27FC             BEQ INCH1A
 F189 7DDFFA           TST CFLAG
 F18C 2703             BEQ INCH1B
 F18E BDFA7F           JSR CURS
 F191 8EF1AB          INCH1B LDX #INTAB
 F194 F6DF8C           LDB IPORT
 F197 58               ASLB
 F198 AD95             JSR [B,X]
 F19A 3594             PULS B,X,PC
 F19C 8DE5            INCH BSR INCH1
                      *
                      * Output char.
                      * Entry: (A) = character.
                      * Exit:  no change.
 F19E 3414            OUTCH PSHS B,X
 F1A0 8EF1B1           LDX #OUTTAB
 F1A3 F6DF8D           LDB OPORT
 F1A6 58               ASLB
 F1A7 AD95             JSR [B,X]
 F1A9 3594             PULS B,X,PC
                      *
 F1AB F1BD            INTAB FDB INKEY
 F1AD F1C3             FDB INTER
 F1AF F1C9             FDB INPRI
                      *
 F1B1 F1CF            OUTTAB FDB OUTGDC
 F1B3 F1D2             FDB OUTTER
 F1B5 F1DD             FDB OUTPRI
                      *
 F1B7 F1E8            STATAB FDB STAKEY
 F1B9 F1EE             FDB STATER
 F1BB F1F4             FDB STAPRI
                      *
                      * Keyboard input.
 F1BD B6FF00          INKEY LDA KEYREG
 F1C0 847F             ANDA #$7F
 F1C2 39               RTS
                      *


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 8
Ver 6.2    D.A.Rumball    2023-05-20

                      * Terminal input routine.
 F1C3 B6FF08          INTER LDA ACIAD1
 F1C6 847F             ANDA #$7F
 F1C8 39               RTS
                      *
                      * Printer input routine.
 F1C9 B6FF04          INPRI LDA ACIAD2
 F1CC 847F             ANDA #$7F
 F1CE 39               RTS
                      *
                      * GDC output routine.
 F1CF 7EFA73          OUTGDC JMP GDCOUT
                      *
                      * Terminal output routine.
 F1D2 F6FF09          OUTTER LDB ACIAC1
 F1D5 C501             BITB #1
 F1D7 27F9             BEQ OUTTER
 F1D9 B7FF08           STA ACIAD1
 F1DC 39               RTS
                      *
                      * Printer output routine.
 F1DD F6FF05          OUTPRI LDB ACIAC2
 F1E0 C501             BITB #1
 F1E2 27F9             BEQ OUTPRI
 F1E4 B7FF04           STA ACIAD2
 F1E7 39               RTS
                      *
                      * Keyboard status routine.
 F1E8 B6FF01          STAKEY LDA PIACA
 F1EB 8580             BITA #$80
 F1ED 39               RTS
                      *
                      * Terminal status routine.
 F1EE B6FF09          STATER LDA ACIAC1
 F1F1 8402             ANDA #$02
 F1F3 39               RTS
                      *
                      * Printer status routine.
 F1F4 B6FF05          STAPRI LDA ACIAC2
 F1F7 8402             ANDA #$2
 F1F9 39               RTS
                      *

                      *
                      *****************************************
                      * Disk drivers                          *
                      * ------------                          *
                      * The system dependant code for the     *
                      * disc drivers fits here. Two tables    *
                      * must be included. These are DDSTAB a  *
                      * four byte table that defines which of *
                      * the (up to four) following sets of    *
                      * jump tables to use, and TABSRT the    *
                      * jump tables themselves. For a full    *
                      * description of the floppy drivers see *
                      * section 4 (pp9-14) of the general     *
                      * Flex adaptation guide.                *
                      *****************************************
                      *
                      * Disc drivers for the MB2K2
                      *


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 9
Ver 6.2    D.A.Rumball    2023-05-20

                      * Floppy disk controller registers
                      COMREG EQU $FF10
                      TRKREG EQU $FF11
                      SECREG EQU $FF12
                      DATREG EQU $FF13
                      *
                      * ramdisk controller registers
                      RCOMRG EQU $FF20
                      RTRKRG EQU $FF21
                      RSECRG EQU $FF22
                      RDATRG EQU $FF23
                      *
                      * framdisk controller registers
                      FCOMRG EQU $FF58
                      FTRKRG EQU $FF59
                      FSECRG EQU $FF5A
                      FDATRG EQU $FF5B
                      *
                      * promdisk controller registers
                      ECOMRG EQU $FF30
                      ETRKRG EQU $FF31
                      ESECRG EQU $FF32
                      EDATRG EQU $FF33
                      *
                      * disk controller commands
                      RSCMD EQU $00
                      SECMD EQU $10
                      RECMD EQU $84
                      WRCMD EQU $A4
                      *
                      * Floppy disk controller status bits
                      RSMASK EQU $58
                      SEMASK EQU $10
                      REMASK EQU $1C
                      WRMASK EQU $5C
                      VEMASK EQU $18
                      DRQ EQU $2
                      BUSY EQU $1
                      *
                      * Jump tables.
 F1FA F25D            TABSRT FDB EREAD Drive type 0 - Eprom disk.
 F1FC F275             FDB EWRITE
 F1FE F24F             FDB EDUMMY
 F200 F24F             FDB EDUMMY
 F202 F28F             FDB ECHECK
 F204 F28F             FDB ECHECK
 F206 F28F             FDB ECHECK
 F208 F24A             FDB DDUMMY
 F20A F24A             FDB DDUMMY
 F20C F24A             FDB DDUMMY
                      *
 F20E F292             FDB RREAD Drive type 1 - Ramdisk.
 F210 F2AA             FDB RWRITE
 F212 F2C2             FDB RCHECK
 F214 F2C2             FDB RCHECK
 F216 F2C2             FDB RCHECK
 F218 F2C2             FDB RCHECK
 F21A F2C2             FDB RCHECK
 F21C F24A             FDB DDUMMY
 F21E F24A             FDB DDUMMY
 F220 F24A             FDB DDUMMY


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 10
Ver 6.2    D.A.Rumball    2023-05-20

                      *
 F222 F2C5             FDB FREAD Drive type 2 - F-ramdisk. (reuses FDC slots for now)
 F224 F2ED             FDB FWRITE
 F226 F24A             FDB DDUMMY
 F228 F315             FDB FCHECK
 F22A F315             FDB FCHECK
 F22C F315             FDB FCHECK
 F22E F315             FDB FCHECK
 F230 F24A             FDB DDUMMY
 F232 F24A             FDB DDUMMY
 F234 F24A             FDB DDUMMY
                      *
 F236 F318             FDB NREAD  Drive type 3 - NetPC drive via ACIA2.
 F238 F387             FDB NWRITE
 F23A F3E7             FDB NVERIFY
 F23C F3EC             FDB NCHECK
 F23E F3EC             FDB NCHECK
 F240 F3EC             FDB NCHECK
 F242 F3EC             FDB NCHECK
 F244 F24A             FDB DDUMMY
 F246 F24A             FDB DDUMMY
 F248 F24A             FDB DDUMMY
                      *
                      * floppy disk controller routines (not used at the moment)
                      *FWAIT RTS
                      *FCMD RTS
                      *FREAD RTS
                      *FWRITE RTS
                      *FVERIFY RTS
                      *FRESTORE RTS
                      *FSEEK RTS
                      *FSEL0 BRA DDUMMY
                      *FSEL1 BRA DDUMMY
                      *
                      * Dummy routine (no errors).
 F24A 5F              DDUMMY CLRB
 F24B 5D               TSTB Set (z)=1
 F24C 1CFE             CLC  Set (c)=0
 F24E 39               RTS
                      *
                      * Dummy return for epromdisk (write protected!)
 F24F 5F              EDUMMY CLRB
 F250 7DDFFE           TST PDWPRT zero = protected
 F253 2602             BNE ED1
 F255 C640             LDB #$40
 F257 5D              ED1 TSTB
 F258 1A01             SEC
 F25A 39               RTS
                      *
                      * speed change routines unused in MB2K2
 F25B 39              FAST RTS
 F25C 39              SLOW RTS
                      *
                      * promdisk routines
 F25D B7FF31          EREAD STA ETRKRG
 F260 F7FF32           STB ESECRG
 F263 8684             LDA #RECMD
 F265 B7FF30           STA ECOMRG trigger a read
 F268 C600             LDB #256
 F26A B6FF33          ERDLP LDA EDATRG
 F26D A780             STA ,X+


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 11
Ver 6.2    D.A.Rumball    2023-05-20

 F26F 5A               DECB
 F270 26F8             BNE ERDLP
>F272 16FFD5           LBRA DDUMMY
                      *
 F275 7DDFFE          EWRITE TST PDWPRT zero = protected
 F278 27D5             BEQ EDUMMY
 F27A B7FF31           STA ETRKRG
 F27D F7FF32           STB ESECRG
 F280 C600             LDB #256
 F282 A680            EWDLP LDA ,X+
 F284 B7FF33           STA EDATRG
 F287 5A               DECB
 F288 26F8             BNE EWDLP
 F28A 86A4             LDA #WRCMD trigger a write
 F28C B7FF30           STA ECOMRG
                      *
>F28F 16FFB8          ECHECK LBRA DDUMMY will always be valid
                      *
                      * Ramdisk routines
 F292 B7FF21          RREAD STA RTRKRG
 F295 F7FF22           STB RSECRG
 F298 8684             LDA #RECMD
 F29A B7FF20           STA RCOMRG
 F29D C600             LDB #256
 F29F B6FF23          RRDLP LDA RDATRG
 F2A2 A780             STA ,X+
 F2A4 5A               DECB
 F2A5 26F8             BNE RRDLP
>F2A7 16FFA0           LBRA DDUMMY
                      *
 F2AA B7FF21          RWRITE STA RTRKRG
 F2AD F7FF22           STB RSECRG
 F2B0 86A4             LDA #WRCMD
 F2B2 B7FF20           STA RCOMRG
 F2B5 C600             LDB #256
 F2B7 A680            WRDLP LDA ,X+
 F2B9 B7FF23           STA RDATRG
 F2BC 5A               DECB
 F2BD 26F8             BNE WRDLP
>F2BF 16FF88           LBRA DDUMMY
                      *
>F2C2 16FF85          RCHECK LBRA DDUMMY will always be ready
                      *
                      * F-ramdisk routines
 F2C5 B7FF59          FREAD STA FTRKRG
 F2C8 F7FF5A           STB FSECRG
 F2CB 8684             LDA #RECMD
 F2CD B7FF58           STA FCOMRG
                      *
 F2D0 B6FF02           LDA SYSREG set activity LED
 F2D3 8A02             ORA #2
 F2D5 B7FF02           STA SYSREG
                      *
 F2D8 C600             LDB #256
 F2DA B6FF5B          RFRDLP LDA FDATRG
 F2DD A780             STA ,X+
 F2DF 5A               DECB
 F2E0 26F8             BNE RFRDLP
                      *
 F2E2 B6FF02           LDA SYSREG clr activity LED
 F2E5 84FD             ANDA #$FD


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 12
Ver 6.2    D.A.Rumball    2023-05-20

 F2E7 B7FF02           STA SYSREG
                      *
 F2EA 16FF5D           LBRA DDUMMY
                      *
 F2ED B7FF59          FWRITE STA FTRKRG
 F2F0 F7FF5A           STB FSECRG
 F2F3 86A4             LDA #WRCMD
 F2F5 B7FF58           STA FCOMRG
                      *
                      *
 F2F8 B6FF02           LDA SYSREG set activity LED
 F2FB 8A02             ORA #2
 F2FD B7FF02           STA SYSREG
                      *
 F300 C600             LDB #256
 F302 A680            WFRDLP LDA ,X+
 F304 B7FF5B           STA FDATRG
 F307 5A               DECB
 F308 26F8             BNE WFRDLP
                      *
 F30A B6FF02           LDA SYSREG clr activity LED
 F30D 84FD             ANDA #$FD
 F30F B7FF02           STA SYSREG
                      *
 F312 16FF35           LBRA DDUMMY
                      *
 F315 16FF32          FCHECK LBRA DDUMMY will always be ready
                      ******************************************************
                      * FlexNet drivers                                   *
                      * ---------------                                   *
                      * Drivers to support a remote connection via the    *
                      * serial port using the FlexNet protocol as defined *
                      * in FLEXNet_421B                                   *
                      *****************************************************
                      *
                      ACK     EQU     $06             FlexNet driver acknowledge char
                      NAK     EQU     $15             FlexNet driver negative acknowledge char
                      *
                      *
                      * read sector from remote drive
                      *
 F318 3404            NREAD   PSHS    B
 F31A 3402                    PSHS    A
 F31C 7FDFFB                  CLR     CHKSUM          clear checksum
 F31F 7FDFFC                  CLR     CHKSUM+1
                      *       
 F322 8673                    LDA     #'s             Send read sector command
 F324 BDF424                  JSR     SCHAR
 F327 244C                    BCC     NRD_DNR         if timeout, then flag drive not ready
                      *
 F329 B6DF8E                  LDA     DRIVE           send drive
 F32C BDF424                  JSR     SCHAR
 F32F 2444                    BCC     NRD_DNR           
                      *
 F331 3502                    PULS    A               send track
 F333 BDF424                  JSR     SCHAR
 F336 243D                    BCC     NRD_DNR          
                      *
 F338 3502                    PULS    A               send sector
 F33A BDF424                  JSR     SCHAR
 F33D 2436                    BCC     NRD_DNR          


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 13
Ver 6.2    D.A.Rumball    2023-05-20

                      *
                      * transfer 256 bytes
 F33F 5F                      CLRB                    
 F340 BDF405          NREAD1  JSR     RCHAR           read byte
 F343 2430                    BCC     NRD_DNR         if timeout, then flag drive not ready
 F345 A780                    STA     0,X+
 F347 BBDFFC                  ADDA    CHKSUM+1        update checksum
 F34A B7DFFC                  STA     CHKSUM+1
 F34D 2403                    BCC     NREAD2         
 F34F 7CDFFB                  INC     CHKSUM
 F352 5A              NREAD2  DECB         
 F353 26EB                    BNE     NREAD1          
                      *
                      * compare checksums
 F355 BDF405                  JSR     RCHAR           get checksum msb
 F358 241B                    BCC     NRD_DNR
 F35A 3402                    PSHS    A
 F35C BDF405                  JSR     RCHAR           get checksum lsb
 F35F 2414                    BCC     NRD_DNR
 F361 1F89                    TFR     A,B            
 F363 3502                    PULS    A               
 F365 10B3DFFB                CMPD    CHKSUM          compare checksums
 F369 260E                    BNE     NRD_ERR         if checksum error, then flag crc read error
                      *
 F36B 8606                    LDA     #ACK            no checksum error, send ACK char
 F36D BDF424                  JSR     SCHAR
 F370 2403                    BCC     NRD_DNR 
 F372 5F                      CLRB                    all OK, flag no error
 F373 200D                    BRA     NRD_END
                      *
 F375 C610            NRD_DNR LDB     #16             flag drive not ready
 F377 2009                    BRA     NRD_END
                      *
 F379 8615            NRD_ERR LDA     #NAK            send NAK
 F37B BDF424                  JSR     SCHAR
 F37E 24F5                    BCC     NRD_DNR  
 F380 C609                    LDB     #09             flag crc read error
                      *
 F382 F7DFFB          NRD_END STB     CHKSUM          used by VERIFY
 F385 5D                      TSTB                    
 F386 39                      RTS
                      *
                      *
                      * write sector to remote drive
                      *
 F387 3404            NWRITE  PSHS B
 F389 3402                    PSHS A
 F38B 7FDFFB                  CLR     CHKSUM          clear checksum
 F38E 7FDFFC                  CLR     CHKSUM+1
                      *       
 F391 8672                    LDA     #'r             Send write sector command
 F393 BDF424                  JSR     SCHAR
 F396 24DD                    BCC     NRD_DNR         if timeout, then flag drive not ready
                      *
 F398 B6DF8E                  LDA     DRIVE           send drive
 F39B BDF424                  JSR     SCHAR
 F39E 24D5                    BCC     NRD_DNR           
                      *
 F3A0 3502                    PULS    A               send track
 F3A2 BDF424                  JSR     SCHAR
 F3A5 24CE                    BCC     NRD_DNR          


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 14
Ver 6.2    D.A.Rumball    2023-05-20

                      *
 F3A7 3502                    PULS    A               send sector
 F3A9 BDF424                  JSR     SCHAR
 F3AC 24C7                    BCC     NRD_DNR          
                      *
                      * transfer 256 bytes
 F3AE 5F                      CLRB                    
 F3AF A680            NWRITE1 LDA     0,X+
 F3B1 BDF424                  JSR     SCHAR           write byte
 F3B4 24BF                    BCC     NRD_DNR         if timeout, then flag drive not ready
 F3B6 BBDFFC                  ADDA    CHKSUM+1        update checksum
 F3B9 B7DFFC                  STA     CHKSUM+1
 F3BC 2403                    BCC     NWRITE2         
 F3BE 7CDFFB                  INC     CHKSUM
 F3C1 5A              NWRITE2 DECB         
 F3C2 26EB                    BNE     NWRITE1          
                      *
                      * compare checksums
 F3C4 B6DFFB                  LDA     CHKSUM
 F3C7 BDF424                  JSR     SCHAR           send checksum msb
 F3CA 24A9                    BCC     NRD_DNR
 F3CC B6DFFC                  LDA     CHKSUM+1
 F3CF BDF424                  JSR     SCHAR           send checksum lsb
 F3D2 24A1                    BCC     NRD_DNR
                      *
 F3D4 BDF405                  JSR     RCHAR           get checksum response
 F3D7 249C                    BCC     NRD_DNR        
 F3D9 8106                    CMPA    #ACK
 F3DB 2603                    BNE     NWR_ERR         if checksum error, then flag write error    
                      *
 F3DD 5F                      CLRB                    all OK, flag no error
 F3DE 2002                    BRA     NWR_END
                      *
 F3E0 C60A            NWR_ERR LDB     #10             flag write error
                      *
 F3E2 F7DFFB          NWR_END STB     CHKSUM          used by VERIFY
 F3E5 5D                      TSTB                    
 F3E6 39                      RTS
                      *
                      *
                      *   verify last sector written to remote drive
                      *
 F3E7 F6DFFB          NVERIFY LDB     CHKSUM         test last checksum
 F3EA 5D                      TSTB
 F3EB 39                      RTS
                      *
                      *
                      *   quick check and check drive ready
                      *
 F3EC 8651            NCHECK  LDA     #'Q             quick check command
 F3EE BDF424                  JSR     SCHAR
 F3F1 240C                    BCC     NCK_ERR         if timeout, then flag drive not ready

 F3F3 BDF405                  JSR     RCHAR           get response from host
 F3F6 2407                    BCC     NCK_ERR
 F3F8 8106                    CMPA    #ACK
 F3FA 2603                    BNE     NCK_ERR         if NAK, then flag drive not ready

 F3FC 5F                      CLRB                    all OK, flag drive ready
 F3FD 2004                    BRA     NCK_END
                      *


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 15
Ver 6.2    D.A.Rumball    2023-05-20

 F3FF C610            NCK_ERR LDB     #16             report drive not ready
 F401 1A01                    ORCC    #$01            check needs carry set as well
                      *
 F403 5D              NCK_END TSTB
 F404 39                      RTS
                      *
                      *
                      * receive char from remote drive.
                      * timeout if no response for approx 1s.
                      * Entry: no parameters
                      * Exit:  (A) = received char, (C)=1 if valid char, (C)=0 if timeout.
                      *
 F405 3430            RCHAR     PSHS    X,Y
                      *
 F407 8E03E8                    LDX     #1000         1000x inner loop
 F40A 108E0190        RCHAR1    LDY     #DELCON       delay constant for inner loop (approx 1ms).
 F40E B6FF05          RCHAR2    LDA     ACIAC2        test for received char
 F411 47                        ASRA
 F412 47                        ASRA
 F413 250A                      BCS     RCHAR3        get character
 F415 313F                      LEAY    -1,Y          else, continue to count delay
 F417 26F5                      BNE     RCHAR2
 F419 301F                      LEAX    -1,X
 F41B 26ED                      BNE     RCHAR1
 F41D 35B0                      PULS    X,Y,PC        return with error if timed out
                      *
 F41F B6FF04          RCHAR3    LDA     ACIAD2        return data (carry bit still set)
 F422 35B0                      PULS    X,Y,PC
                      *
                      *
                      * transmit char to remote drive.
                      * timeout if no response for approx 1s. (allows for use of hardware flow control)
                      * Entry: (A) = char to transmit
                      * Exit:  (A) = received char, (C)=1 if valid char, (C)=0 if timeout.
                      *
 F424 3430            SCHAR     PSHS    X,Y
 F426 3402                      PSHS    A
                      *
 F428 8E03E8                    LDX     #1000         1000x inner loop
 F42B 108E0190        SCHAR1    LDY     #DELCON       delay constant for inner loop (approx 1ms).
 F42F B6FF05          SCHAR2    LDA     ACIAC2        test for space in transmit FIFO
 F432 47                        ASRA
 F433 250C                      BCS     SCHAR3        send character
 F435 313F                      LEAY    -1,Y          else, continue to count delay
 F437 26F6                      BNE     SCHAR2
 F439 301F                      LEAX    -1,X
 F43B 26EE                      BNE     SCHAR1
 F43D 3502                      PULS    A
 F43F 35B0                      PULS    X,Y,PC        return with error if timed out
                      *
 F441 3502            SCHAR3    PULS    A
 F443 B7FF04                    STA     ACIAD2        send data (carry bit still set)
 F446 35B0                      PULS    X,Y,PC
                      *               *
                      * Read sector routine.
                      * Entry: (X) = address where sector is to be placed.
                      *        (A) = Track  number.
                      *        (B) = Sector number.
                      * Exit:  (B) = Error code  (z)=1 if no error.
 F448 6E9FDFA1        READ JMP [REAVEC]
                      *


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 16
Ver 6.2    D.A.Rumball    2023-05-20

                      * Write track routine.
                      * Entry: (X) = Address of area of memory from which the data will be taken.
                      *        (A) = Track number.
                      *        (B) = Sector number.
                      * Exit:  (B) = Error condition, (Z)=1 no an error.
 F44C 6E9FDFA3        WRITE JMP [WRIVEC]
                      *
                      * Verify sector routine.
                      * Entry: no parameters.
                      * Exit:  (B) = Error condition (Z)=1 if no error.
 F450 6E9FDFA5        VERIFY JMP [VERVEC]
                      *
                      * Restore drive to track 00.
                      * Entry: (X) = FCB address (3,X contains drive number).
                      * Exit:  (B) = Error condition, (Z)=1 if no error.
 F454 8D07            RST BSR DRV Select drive first.
 F456 2701             BEQ RST1
 F458 39               RTS
 F459 6E9FDFA7        RST1 JMP [RSTVEC]
                      *
                      * Select current drive.
                      * Entry: (X) = FCB address (3,X contains drive number).
                      * Exit:  (B) = Error condition, (Z)=0 and (c)=1 if error.
                      *        (B) = $0F if non existent drive.
 F45D 3430            DRV PSHS X,Y
 F45F E603             LDB 3,X Get driver type.
 F461 F7DF8E           STB DRIVE save the drive number for the FlexNet drivers
 F464 8EDF9D           LDX #DDSTAB
 F467 A685             LDA B,X
 F469 81FF             CMPA #$FF Is the drive nonexistent?
 F46B 2608             BNE DRIVE1
 F46D 3530             PULS X,Y
 F46F C60F             LDB #$0F
 F471 5D               TSTB
 F472 1A01             SEC
 F474 39               RTS
 F475 C614            DRIVE1 LDB #20 Get correct table start address.
 F477 3D               MUL
 F478 8EF1FA           LDX #TABSRT
 F47B 308B             LEAX D,X
 F47D 108EDFA1         LDY #REAVEC Copy table into ram.
 F481 C614             LDB #20
 F483 A680            DRIVE2 LDA ,X+
 F485 A7A0             STA ,Y+
 F487 5A               DECB
 F488 26F9             BNE DRIVE2
 F48A 3530             PULS X,Y
 F48C 6E9FDFA9         JMP [DRVVEC]
                      *
                      * Check for drive ready.
                      * Entry: (X) = FCB address (3,X contains drive number)>
                      * Exit:  (B) = Error condition, (Z)=0 AND (C)=1 if drive is not ready.
 F490 6E9FDFAB        CHKRDY JMP [CHKVEC]
                      *
                      * Quick drive ready check.
                      * Entry: (X) = FCB address (3,X contains drive number).
                      * Exit:  (B) = Error condition, (Z)=0 AND (c)=1 if drive not ready.
 F494 6E9FDFAD        QUICK JMP [QUIVEC]
                      *
                      * Init (cold start).
                      * Entry: no parameters.


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 17
Ver 6.2    D.A.Rumball    2023-05-20

                      * Exit: no change.
 F498 4F              DINIT CLRA
 F499 B7DF8E          DINIT1 STA DRIVE Init each valid drive in turn.
 F49C 8EDF8B           LDX #(DRIVE-3)
 F49F 8DBC             BSR DRV
 F4A1 2504             BCS DINIT2
 F4A3 AD9FDFAF         JSR [INIVEC]
 F4A7 B6DF8E          DINIT2 LDA DRIVE
 F4AA 4C               INCA
 F4AB 8104             CMPA #4
 F4AD 26EA             BNE DINIT1
 F4AF 39               RTS
                      *
                      * Warm start.
                      * Entry: no parameters.
                      * Exit: no change.
 F4B0 6E9FDFB1        WARM JMP [WARVEC]
                      *
                      * Seek track.
                      * Entry: (A) = Track number.
                      *        (B) = Sector number.
                      * Exit:  (B) = Error condition, (Z)=1 if no error.
 F4B4 6E9FDFB3        SEEK JMP [SEEVEC]
                      *
                      *******************************
                      * Common monitor subroutines. *
                      *******************************
                      *
                      * Print a CR followed by a LF.
                      * Entry: no parameters.
                      * Exit: (A) destroyed.
 F4B8 0A0D04          CRLFS FCB $0A,$0D,4
 F4BB 3410            PCRLF     PSHS    X
 F4BD 8EF4B8                    LDX     #CRLFS  Get CR,LF string,
 F4C0 8D05                      BSR     PDATA1  and print it.
 F4C2 3590             PULS X,PC
                      *
                      * Print character string .
                      * Entry: (X) = Pointer to character string.
                      * Exit:  (X) = Pointer to end of string token Hex(04).
                      *        (A)   Destroyed.
 F4C4 BDF19E          P         JSR     OUTCH   Print char.
 F4C7 A680            PDATA1    LDA     ,X+    Get character pointed to by X.
 F4C9 8104                      CMPA    #$04   End of string token?
 F4CB 26F7             BNE P If not then print char.
 F4CD 39                        RTS
                      *
                      * Print character string preceded by a CR,LF.
                      * Entry: (X) = Pointer to character string.
                      * Exit:  (X) = Pointer to end of string token Hex(04).
                      *        (A) = Destroyed.
 F4CE 8DEB            PSTRNG    BSR     PCRLF
 F4D0 8DF5                      BSR     PDATA1
 F4D2 39                        RTS  
                      *
                      * Print the A reg.
                      * Entry :- (A) = Data to be printed.
 F4D3 3416            PRINTA PSHS D,X
 F4D5 B7DF91           STA TEMP
 F4D8 8EDF91           LDX #TEMP
 F4DB 8D79             BSR OUT2HS


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 18
Ver 6.2    D.A.Rumball    2023-05-20

 F4DD 3596             PULS D,X,PC
                      *
                      * Print the X reg.
                      * Entry :- (X) = Data to be printed.
 F4DF 3416            PRINTX PSHS D,X
 F4E1 BFDF92           STX XTEMP
 F4E4 8EDF92           LDX #XTEMP
 F4E7 8D6B             BSR OUT4HS
 F4E9 3596             PULS D,X,PC
                      *
                      * Delay routine.
                      * Entry: (X) = Delay time in milli seconds.
                      * Exit:  no change.
 F4EB 3436            DELAY     PSHS    D,X,Y
 F4ED 108E0190        DELAY1    LDY     #DELCON delay constant.
 F4F1 3D              DELAY2    MUL
 F4F2 313F                      LEAY    -1,Y
 F4F4 26FB                      BNE     DELAY2
 F4F6 301F                      LEAX    -1,X
 F4F8 26F3                      BNE     DELAY1
 F4FA 35B6                      PULS    D,X,Y,PC
                      *
                      * Build a four hex digit address.
                      * Entry: no parameters.
                      * Exit:  (X) = Address.
                      *        (A) = Destroyed.
                      *        (B) = Destroyed.
 F4FC 8D09            BADDR     BSR     BYTE                   Get 1st char.
 F4FE 1F89                      TFR     A,B
 F500 8D05                      BSR     BYTE                   and next.
 F502 1E89                      EXG     A,B
 F504 1F01                      TFR     D,X                    Put in X.
 F506 39                        RTS
                      *
                      * Get a two digit hex byte.
                      * Entry: no parameters.
                      * Exit:  (A) = Byte.
 F507 3404            BYTE      PSHS    B
 F509 8D21                      BSR     INHEX                  Get hex digit.
 F50B 48                        ASLA
 F50C 48                        ASLA                           Shift to msb.
 F50D 48                        ASLA
 F50E 48                        ASLA
 F50F 1F89                      TFR     A,B                    Save in B.
 F511 8D19                      BSR     INHEX                  Get next digit.
 F513 3404                      PSHS    B
 F515 ABE0                      ADDA    ,S+                    Add together bytes.
 F517 3584             PULS B,PC
                      *
                      * Print left hex digit.
                      * Entry: (A) = Byte containing digit.
                      * Exit:  (A) = Byte containing shifted digit.
 F519 44              OUTHL     LSRA
 F51A 44                        LSRA
 F51B 44                        LSRA
 F51C 44                        LSRA
                      *
                      * Output right hex digit.
                      * Entry: (A) = Byte containing digit.
                      * Exit:  (A) = Ascii coded digit.
 F51D 840F            OUTHR     ANDA    #$0F                   Get four bits only.


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 19
Ver 6.2    D.A.Rumball    2023-05-20

 F51F 8B30                      ADDA    #$30                   Add ascii zero.
 F521 8139                      CMPA    #$39                   Numeric overflow?
 F523 1023FC77                  LBLS    OUTCH
 F527 8B07                      ADDA    #$07                   Must be hex.
 F529 7EF19E                    JMP    OUTCH
                      *
                      * Input a valid hex character (If not hex then backspace).
                      * Entry: no parameters.
                      * Exit:  (A) = Valid hex char.
 F52C BDF19C          INHEX     JSR     INCH
 F52F BDF580                    JSR     TOUPPER
 F532 8030                      SUBA    #$30                   Remove ascii bias.
 F534 2B0F                      BMI     NOTHEX
 F536 8109                      CMPA    #$09                   Number?
 F538 2F0A                      BLE     INHEX1                 Yes.
 F53A 8111                      CMPA    #$11                   Keep testing.
 F53C 2B07                      BMI     NOTHEX
 F53E 8116                      CMPA    #$16
 F540 2E03                      BGT     NOTHEX
 F542 8007                      SUBA    #$07
 F544 39              INHEX1    RTS
 F545 8608            NOTHEX    LDA     #$08                   If not a number
 F547 BDF19E                    JSR     OUTCH                  Print a backspace and try again.
 F54A 20E0                      BRA     INHEX
                      *
                      * Hex print routines.
                      * Entry: (X) = Pointer to a one or two byte hex number.
                      * Exit:  (A) = Destroyed.
 F54C A600            OUT2H     LDA     0,X                    Output two hex chars.
 F54E 8DC9            OUT2HA    BSR     OUTHL
 F550 A680                      LDA      ,X+
 F552 20C9                      BRA     OUTHR
 F554 8DF6            OUT4HS    BSR     OUT2H                  Output 4 hex chars + space.
 F556 8DF4            OUT2HS    BSR     OUT2H                  Output 2 hex chars + space.
                      *
                      * Output a space.
                      * Entry: no parameters.
                      * Exit   (A) = Destroyed.
 F558 8620            OUTS      LDA     #'                    Output space.
 F55A 7EF19E                    JMP    OUTCH
                      *
                      * Random number generator.
                      * Entry: no parameters.
                      * Exit:  (A) = Random number from 0 to 255.
 F55D 3404            RANDOM PSHS B
 F55F C608             LDB #8
 F561 B6DF9B          RPT LDA RNDM+3
 F564 48               ASLA
 F565 48               ASLA
 F566 48               ASLA
 F567 B8DF9B           EORA RNDM+3
 F56A 48               ASLA
 F56B 48               ASLA
 F56C 79DF98           ROL RNDM
 F56F 79DF99           ROL RNDM+1
 F572 79DF9A           ROL RNDM+2
 F575 79DF9B           ROL RNDM+3
 F578 5A               DECB
 F579 26E6             BNE RPT
 F57B B6DF98           LDA RNDM
 F57E 3584             PULS B,PC


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 20
Ver 6.2    D.A.Rumball    2023-05-20

                      *
                      **************************************
                      * Extra system subroutines fit here. *
                      **************************************
                      *
                      * convert to upper case chars in the range a-z
                      * Entry: (A) :- ASCII char to be converted.
                      * Exit:  (A) :- converted char if in range, else no change.
 F580 8161            TOUPPER CMPA #'a
 F582 2D06                    BLT  TOUP1
 F584 817A                    CMPA #'z
 F586 2E02                    BGT  TOUP1
 F588 8020                    SUBA #'a-'A
 F58A 39              TOUP1   RTS
                      *
                      * convert BCD coded value to binary
                      * Entry: (A) :- value to be converted.
                      * Exit:  (A) :- converted value.
 F58B 3404            BCD2BIN PSHS B
 F58D 3402                    PSHS A
 F58F 44                      LSRA
 F590 44                      LSRA
 F591 44                      LSRA
 F592 44                      LSRA
 F593 C60A                    LDB     #10
 F595 3D                      MUL
 F596 1F98                    TFR B,A
 F598 3504                    PULS B
 F59A C40F                    ANDB    #$0F
 F59C F7DF91                  STB TEMP
 F59F BBDF91                  ADDA TEMP
 F5A2 3584                    PULS B,PC
                      *
                      * convert binary value to BCD
                      * Entry: (A) :- value to be converted.
                      * Exit:  (A) :- converted value.
 F5A4 3404            BIN2BCD PSHS B
 F5A6 5F                      CLRB
 F5A7 800A            BLP     SUBA    #10
 F5A9 2B03                    BMI     BLP1
 F5AB 5C                      INCB
 F5AC 20F9                    BRA     BLP
 F5AE 8B0A            BLP1    ADDA    #10
 F5B0 58                      ASLB
 F5B1 58                      ASLB
 F5B2 58                      ASLB
 F5B3 58                      ASLB
 F5B4 F7DF91                  STB     TEMP
 F5B7 BBDF91                  ADDA    TEMP
 F5BA 3584                    PULS B,PC
                      *
                      * Get time string.
                      * Entry :- (X) points to ten byte data area.
                      * Exit :- Date and time placed in data area.
 F5BC 3416            GETTIM PSHS D,X
 F5BE C60A             LDB #10
 F5C0 8D07            GTL BSR GETRTC
 F5C2 A780             STA ,X+
 F5C4 5A               DECB
 F5C5 26F9             BNE GTL
 F5C7 3596             PULS D,X,PC


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 21
Ver 6.2    D.A.Rumball    2023-05-20

                      *
                      * Get a byte from the RTC.
                      * Entry :- (B) = RTC address.
                      * Exit :- (A) = Data.
 F5C9 860A            GETRTC LDA #10
 F5CB B7FF18           STA RTCADD
 F5CE B6FF19           LDA RTCDAT
 F5D1 2BF6             BMI GETRTC
 F5D3 F7FF18           STB RTCADD
 F5D6 B6FF19           LDA RTCDAT
 F5D9 39               RTS
                      *
                      * Put time string.
                      * Entry :- (X) = Pointer to ten byte data area.
 F5DA 3416            PUTTIM PSHS D,X
 F5DC C60A             LDB #10
 F5DE A680            PTL LDA ,X+
 F5E0 8D05             BSR PUTRTC
 F5E2 5A               DECB
 F5E3 26F9             BNE PTL
 F5E5 3596             PULS D,X,PC
                      * Send a byte to the RTC.
                      * Entry :- (B) = RTC address  (A) = Data
 F5E7 3402            PUTRTC PSHS A
 F5E9 860A            PRTC LDA #10
 F5EB B7FF18           STA RTCADD
 F5EE B6FF19           LDA RTCDAT 
 F5F1 2BF6             BMI PRTC
 F5F3 F7FF18           STB RTCADD
 F5F6 3502             PULS A
 F5F8 B7FF19           STA RTCDAT
 F5FB 39               RTS
                      *
                      * Beep for 100ms.
 F5FC 3412            BEEP PSHS A,X
 F5FE B6FF02           LDA SYSREG
 F601 8A08             ORA #8
 F603 B7FF02           STA SYSREG
 F606 8E0064           LDX #100
 F609 BDF4EB           JSR DELAY
 F60C B6FF02           LDA SYSREG
 F60F 84F7             ANDA #$F7
 F611 B7FF02           STA SYSREG
 F614 3592             PULS A,X,PC
                      *
 F616 B6FF02          MAPOUT LDA SYSREG
 F619 84FB             ANDA #$FB
 F61B B7FF02           STA SYSREG
 F61E 6E84             JMP ,X
                      *
                      *
                      * Send GDC command.
 F620 4D              GCOM TSTA If reset then ignore flag.
 F621 270B             BEQ GCOM2
 F623 3402             PSHS A
 F625 B6FF14          GCOM1 LDA GDCPRM
 F628 8504             BITA #$04
 F62A 27F9             BEQ GCOM1
 F62C 3502             PULS A
 F62E B7FF15          GCOM2 STA GDCCOM
 F631 39               RTS


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 22
Ver 6.2    D.A.Rumball    2023-05-20

                      *
                      *
                      * Send GDC parameter.
 F632 3402            GPRM PSHS A
 F634 B6FF14          GPRM1 LDA GDCPRM
 F637 8504             BITA #$04
 F639 27F9             BEQ GPRM1
 F63B 3502             PULS A
 F63D B7FF14           STA GDCPRM
 F640 39               RTS
                      *
                      *
                      * Read parameter byte from GDC.
 F641 B6FF14          GPRMI LDA GDCPRM
 F644 8501             BITA #$01 Data ready?
 F646 27F9             BEQ GPRMI
 F648 B6FF15           LDA GDCCOM
 F64B 39               RTS
                      *
                      *
                      * Set mask.
 F64C 3406            MASK PSHS D
 F64E 864A             LDA #$4A
 F650 8DCE             BSR GCOM
 F652 1F10             TFR X,D
 F654 1E89             EXG A,B
 F656 8DDA             BSR GPRM
 F658 1E89             EXG A,B
 F65A 8DD6             BSR GPRM
 F65C 3586             PULS D,PC
                      *
                      *
                      * Define line profile and 'pen' type.
 F65E 3416            SETPEN PSHS D,X
 F660 8403             ANDA #$03
 F662 8A20             ORA #$20
 F664 8DBA             BSR GCOM
 F666 1F10             TFR X,D
 F668 F7DFC4           STB GPARAM+1
 F66B B7DFC3           STA GPARAM
 F66E 8EDFBD           LDX #GPARAM-6
 F671 8D02             BSR SETPAT
 F673 3596             PULS D,X,PC
                      *
                      *
                      * Set up graphics pattern in parameter ram.
                      * X points to eight bytes in ram.
 F675 3416            SETPAT PSHS A,B,X
 F677 8678             LDA #$78
 F679 8DA5             BSR GCOM
 F67B C608             LDB #8
 F67D 3008             LEAX 8,X
 F67F A682            SETPT1 LDA ,-X
 F681 8DAF             BSR GPRM
 F683 5A               DECB
 F684 26F9             BNE SETPT1
 F686 3596             PULS A,B,X,PC
                      *
                      *
                      * Set up figs command using parameter set in ram
 F688 3416            FIGSF PSHS A,B,X


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 23
Ver 6.2    D.A.Rumball    2023-05-20

 F68A 864C             LDA #$4C
 F68C 8D92             BSR GCOM
 F68E 8EDFCD           LDX #GFIGS
 F691 A684             LDA ,X
 F693 8D9D             BSR GPRM
 F695 5A               DECB
 F696 270E             BEQ FIN
 F698 A602            FIGSF1 LDA 2,X
 F69A 8D96             BSR GPRM
 F69C A601             LDA 1,X
 F69E 3002             LEAX 2,X
 F6A0 8D90             BSR GPRM
 F6A2 5A               DECB
 F6A3 5A               DECB
 F6A4 26F2             BNE FIGSF1
 F6A6 866C            FIN LDA #$6C
 F6A8 17FF75           LBSR GCOM
 F6AB 3596             PULS A,B,X,PC
                      *
                      *
                      * Set figs command for graphics.
 F6AD 3416            FIGSG PSHS A,B,X
 F6AF 864C             LDA #$4C
 F6B1 17FF6C           LBSR GCOM
 F6B4 8EDFCD           LDX #GFIGS
 F6B7 A684             LDA ,X
 F6B9 17FF76           LBSR GPRM
 F6BC 5A               DECB
 F6BD 2710             BEQ FING
 F6BF A602            FIGSG1 LDA 2,X
 F6C1 17FF6E           LBSR GPRM
 F6C4 A601             LDA 1,X
 F6C6 3002             LEAX 2,X
 F6C8 17FF67           LBSR GPRM
 F6CB 5A               DECB
 F6CC 5A               DECB
 F6CD 26F0             BNE FIGSG1
 F6CF 8668            FING LDA #$68
 F6D1 17FF4C           LBSR GCOM
 F6D4 3596             PULS A,B,X,PC
                      *
                      *
                      * Set up partitions in GDC.
 F6D6 3476            SETPAR PSHS A,B,X,Y,U
 F6D8 1E89             EXG A,B
 F6DA FDDFBF           STD PART2
 F6DD 1F10             TFR X,D
 F6DF 1E89             EXG A,B
 F6E1 FDDFBB           STD PART1
 F6E4 1F20             TFR Y,D
 F6E6 C40F             ANDB #$0F
 F6E8 8610             LDA #16
 F6EA 3D               MUL
 F6EB F7DFBD           STB PART1+2
 F6EE 1F20             TFR Y,D
 F6F0 4456             LSRD
 F6F2 4456             LSRD
 F6F4 4456             LSRD
 F6F6 4456             LSRD
 F6F8 F7DFBE           STB PART1+3
 F6FB 1F30             TFR U,D


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 24
Ver 6.2    D.A.Rumball    2023-05-20

 F6FD C40F             ANDB #$0F
 F6FF 8610             LDA #16
 F701 3D               MUL
 F702 F7DFC1           STB PART2+2
 F705 1F30             TFR U,D
 F707 4456             LSRD
 F709 4456             LSRD
 F70B 4456             LSRD
 F70D 4456             LSRD
 F70F F7DFC2           STB PART2+3
                      * BSR SYNC
 F712 8670             LDA #$70
 F714 17FF09           LBSR GCOM
 F717 8EDFBB           LDX #PART1
 F71A C608             LDB #8
 F71C A680            SETPR1 LDA ,X+
 F71E 17FF11           LBSR GPRM
 F721 5A               DECB
 F722 26F8             BNE SETPR1
 F724 35F6             PULS A,B,X,Y,U,PC
                      *
                      *
 F726 3402            SYNC PSHS A
 F728 B6FF14          SY1 LDA GDCPRM
 F72B 8520             BITA #$20
 F72D 26F9             BNE SY1
 F72F B6FF14          SY2 LDA GDCPRM
 F732 8520             BITA #$20
 F734 27F9             BEQ SY2
 F736 3582             PULS A,PC
                      *
                      *
                      * Set graphics cursor (modified version that uses the 'secret' GDC command $D7).
 F738 3436            SETCRG PSHS A,B,X,Y
 F73A BFDFB7           STX XCOORD
 F73D 10BFDFB9         STY YCOORD
 F741 86D7             LDA #$D7
 F743 B7FF15           STA GDCCOM
 F746 1F10             TFR X,D send x,y lo byte first
 F748 F7FF14           STB GDCPRM
 F74B B7FF14           STA GDCPRM
 F74E 1F20             TFR Y,D
 F750 F7FF14           STB GDCPRM
 F753 B7FF14           STA GDCPRM
 F756 35B6             PULS A,B,X,Y,PC
                      *
                      *
                      * Read graphics cursor.
 F758 3406            GETCRG PSHS A,B
 F75A 86E0             LDA #$E0
 F75C 17FEC1           LBSR GCOM
 F75F 17FEDF           LBSR GPRMI LOW BYTE
 F762 1F89             TFR A,B
 F764 17FEDA           LBSR GPRMI HIGH BYTE.
 F767 108E0000         LDY #0
 F76B 835E00           SUBD #$5E00
 F76E 830030          GTCRG1 SUBD #48
 F771 2B04             BMI GTCRG2
 F773 3121             LEAY 1,Y
 F775 20F7             BRA GTCRG1
 F777 C30030          GTCRG2 ADDD #48


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 25
Ver 6.2    D.A.Rumball    2023-05-20

 F77A 5849             ASLD
 F77C 5849             ASLD
 F77E 5849             ASLD
 F780 5849             ASLD
 F782 1F01             TFR D,X
 F784 17FEBA           LBSR GPRMI
 F787 17FEB7           LBSR GPRMI GET FIRST MASK BYTE
 F78A 1F89             TFR A,B
 F78C 17FEB2           LBSR GPRMI
 F78F 1CFE             CLC
 F791 4456            GTCRG3 LSRD
 F793 2504             BCS GTCRG4
 F795 3001             LEAX 1,X
 F797 20F8             BRA GTCRG3
 F799 BFDFB7          GTCRG4 STX XCOORD
 F79C 10BFDFB9         STY YCOORD
 F7A0 3586             PULS A,B,PC
                      *
                      * Switch off display.
 F7A2 3402            OFF PSHS A
 F7A4 BDF726           JSR SYNC
 F7A7 860C             LDA #$0C
 F7A9 17FE74           LBSR GCOM
 F7AC 3582             PULS A,PC
                      *
                      *
                      * Switch on display.
 F7AE 3402            ON PSHS A
 F7B0 BDF726           JSR SYNC
 F7B3 860D             LDA #$0D
 F7B5 17FE68           LBSR GCOM
 F7B8 3582             PULS A,PC
                      *
                      *
                      * Set display to graphics.
 F7BA 3476            GRAPH PSHS D,X,Y,U
 F7BC 5F               CLRB
 F7BD 8D16             BSR MODE
 F7BF 8A09             ORA #$09
 F7C1 5A               DECB
 F7C2 8D11             BSR MODE
 F7C4 8E5E00           LDX #$5E00
 F7C7 108E0240         LDY #576
 F7CB CC0000           LDD #0
 F7CE 1F03             TFR D,U
 F7D0 BDF6D6           JSR SETPAR
 F7D3 35F6             PULS D,X,Y,U,PC
                      *
                      * Set GDC mode.
 F7D5 5D              MODE TSTB
 F7D6 2710             BEQ MODE1
 F7D8 B7DFCB           STA GMODE
 F7DB 3402             PSHS A
 F7DD 860F             LDA #$0F
 F7DF 17FE3E           LBSR GCOM
 F7E2 3502             PULS A
 F7E4 17FE4B           LBSR GPRM
 F7E7 39               RTS
 F7E8 B6DFCB          MODE1 LDA GMODE
 F7EB 39               RTS
                      *


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 26
Ver 6.2    D.A.Rumball    2023-05-20

                      *
                      * Set graphics zoom.
 F7EC 5D              ZOOM TSTB
 F7ED 2710             BEQ ZOOM1
 F7EF B7DFCC           STA GZOOM
 F7F2 3402             PSHS A
 F7F4 8646             LDA #$46
 F7F6 17FE27           LBSR GCOM
 F7F9 3502             PULS A
 F7FB 17FE34           LBSR GPRM
 F7FE 39               RTS
 F7FF B6DFCC          ZOOM1 LDA GZOOM
 F802 39               RTS
                      *
                      *
                      * Area fill.
 F803 3436            FILL PSHS A,B,Y,X
 F805 8487             ANDA #$87
 F807 8A10             ORA #$10
 F809 B7DFCD           STA GFIGS
 F80C 313F             LEAY -1,Y
 F80E 1F20             TFR Y,D
 F810 FDDFCE           STD DC
 F813 1F10             TFR X,D
 F815 FDDFD0           STD D0
 F818 FDDFD2           STD D2
 F81B C607             LDB #7
 F81D 17FE8D           LBSR FIGSG
 F820 35B6             PULS A,B,Y,X,PC
                      *
                      *Clear graphics screen.
 F822 3436            CLEARG PSHS D,X,Y
 F824 8E0000           LDX #0
 F827 1F12             TFR X,Y
 F829 BDF738           JSR SETCRG
 F82C 8E4000           LDX #16384
 F82F 8602             LDA #2
 F831 8D11             BSR CLEARX
 F833 8E2C30           LDX #(48*577-16384)
 F836 8602             LDA #2
 F838 8D0A             BSR CLEARX
 F83A 8E0000           LDX #0
 F83D 1F12             TFR X,Y
 F83F BDF738           JSR SETCRG
 F842 35B6             PULS D,X,Y,PC
                      *
 F844 3412            CLEARX PSHS A,X
 F846 3402             PSHS A
 F848 301F             LEAX -1,X
 F84A 3410             PSHS X
 F84C 8EFFFF           LDX #$FFFF
 F84F BDF64C           JSR MASK
 F852 864C             LDA #$4C
 F854 17FDC9           LBSR GCOM
 F857 8602             LDA #2
 F859 17FDD6           LBSR GPRM
 F85C 3506             PULS D
 F85E 1E89             EXG A,B
 F860 17FDCF           LBSR GPRM
 F863 1E89             EXG A,B
 F865 17FDCA           LBSR GPRM


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 27
Ver 6.2    D.A.Rumball    2023-05-20

 F868 3502             PULS A
 F86A 8A20             ORA #$20
 F86C 17FDB1           LBSR GCOM
 F86F 86FF             LDA #$FF
 F871 17FDBE           LBSR GPRM
 F874 17FDBB           LBSR GPRM
 F877 3592             PULS A,X,PC
                      *
                      *
                      * Init display parameters.
 F879 3416            GDCINIT PSHS A,B,X
                      * Init gdc
 F87B 4F               CLRA
 F87C 17FDA1           LBSR GCOM
                      * Set up main sync parameters.
 F87F C621             LDB #$21
 F881 BDF5C9          GDC3 JSR GETRTC
 F884 BDF632           JSR GPRM
 F887 5C               INCB
 F888 C129             CMPB #$29
 F88A 26F5             BNE GDC3
                      * Master vsync
 F88C 866F            SUGDC1 LDA #$6F
 F88E 17FD8F           LBSR GCOM
                      * Define pitch.
 F891 8647             LDA #$47
 F893 17FD8A           LBSR GCOM
 F896 8630             LDA #$30
 F898 17FD97           LBSR GPRM
                      * Define cursor.
 F89B 864B             LDA #$4B
 F89D 17FD80           LBSR GCOM
 F8A0 4F               CLRA
 F8A1 17FD8E           LBSR GPRM
 F8A4 86C0             LDA #$C0
 F8A6 17FD89           LBSR GPRM
 F8A9 4F               CLRA
 F8AA 17FD85           LBSR GPRM
                      * Set zoom.
 F8AD C601             LDB #1
 F8AF 4F               CLRA
 F8B0 17FF39           LBSR ZOOM
                      * Set text mode.
 F8B3 8616             LDA #$16
 F8B5 B7DFCB           STA GMODE
                      * Switch on display.
 F8B8 866B             LDA #$6B
 F8BA 17FD63           LBSR GCOM
 F8BD BDFA19           JSR CLEART
 F8C0 BDF9FB           JSR TEXT
                       *
 F8C3 860C             LDA #$0C init the GDC terminal emulator
 F8C5 BDFA73           JSR GDCOUT
                      *
 F8C8 3596             PULS A,B,X,PC
                      *
                      * Plot a point.
 F8CA 3404            POINT PSHS B
 F8CC 7FDFCD           CLR GFIGS
 F8CF C601             LDB #1
 F8D1 17FDB4           LBSR FIGSF


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 28
Ver 6.2    D.A.Rumball    2023-05-20

 F8D4 3584             PULS B,PC
                      *
                      *
                      * Plot a line.
 F8D6 3406            LINE PSHS D
 F8D8 86D8             LDA #$D8
 F8DA B7FF15           STA GDCCOM
 F8DD 1F10             TFR X,D send x,y lo byte first
 F8DF F7FF14           STB GDCPRM
 F8E2 B7FF14           STA GDCPRM
 F8E5 1F20             TFR Y,D
 F8E7 F7FF14           STB GDCPRM
 F8EA B7FF14           STA GDCPRM 
 F8ED 3506             PULS D
 F8EF BFDFB7           STX XCOORD   UPDATE COORDINATES
 F8F2 10BFDFB9         STY YCOORD
 F8F6 17FE3F           LBSR SETCRG
 F8F9 39               RTS
 F8FA 09080A0B0E0F0D  TABLE FCB $09,$08,$0A,$0B,$0E,$0F,$0D,$0C
 F901 0C
                      *
                      * Plot a rectangle.
 F902 3436            RECT PSHS A,B,X,Y
 F904 8407             ANDA #$07
 F906 8A40             ORA #$40
 F908 B7DFCD           STA GFIGS
 F90B CC0003           LDD #$0003
 F90E FDDFCE           STD DC
 F911 301F             LEAX -1,X
 F913 313F             LEAY -1,Y
 F915 1F10             TFR X,D
 F917 FDDFD0           STD D0
 F91A FDDFD6           STD DM
 F91D 1F20             TFR Y,D
 F91F FDDFD2           STD D2
 F922 CCFFFF           LDD #$FFFF
 F925 FDDFD4           STD D1
 F928 C60B             LDB #11
 F92A 17FD5B           LBSR FIGSF
 F92D 35B6             PULS A,B,X,Y,PC
                      *
                      *
                      * Plot a circle.
 F92F 3436            CIRCLE PSHS A,B,X,Y
 F931 BEDFB7           LDX XCOORD
 F934 10BEDFB9         LDY YCOORD
 F938 BFDF92           STX XTEMP
 F93B 10BFDF94         STY YTEMP
 F93F 3086             LEAX A,X
 F941 C604             LDB #4
 F943 8D3B             BSR ARC
 F945 C607             LDB #7
 F947 8D37             BSR ARC
 F949 BEDF92           LDX XTEMP
 F94C 31A6             LEAY A,Y
 F94E C602             LDB #2
 F950 8D2E             BSR ARC
 F952 C605             LDB #5
 F954 8D2A             BSR ARC
 F956 10BEDF94         LDY YTEMP
 F95A 40               NEGA


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 29
Ver 6.2    D.A.Rumball    2023-05-20

 F95B 3086             LEAX A,X
 F95D 40               NEGA
 F95E 5F               CLRB
 F95F 8D1F             BSR ARC
 F961 C603             LDB #3
 F963 8D1B             BSR ARC
 F965 BEDF92           LDX XTEMP
 F968 40               NEGA
 F969 31A6             LEAY A,Y
 F96B 40               NEGA
 F96C C601             LDB #1
 F96E 8D10             BSR ARC
 F970 C606             LDB #6
 F972 8D0C             BSR ARC
 F974 BEDF92           LDX XTEMP
 F977 10BEDF94         LDY YTEMP
 F97B 17FDBA           LBSR SETCRG
 F97E 35B6             PULS A,B,X,Y,PC
                      *
                      * Plot an arc.
 F980 3406            ARC PSHS A,B
 F982 17FDB3           LBSR SETCRG
 F985 3406             PSHS D
 F987 C6B5             LDB #181
 F989 3D               MUL
 F98A B7DFD8           STA CONST
 F98D 3506             PULS D
 F98F C407             ANDB #$07
 F991 CA20             ORB #$20
 F993 F7DFCD           STB GFIGS
 F996 4A               DECA
 F997 5F               CLRB
 F998 B7DFD1           STA D0+1
 F99B F7DFD0           STB D0
 F99E 1E89             EXG A,B
 F9A0 5849             ASLD
 F9A2 FDDFD2           STD D2
 F9A5 F6DFD8           LDB CONST
 F9A8 4F               CLRA
 F9A9 FDDFCE           STD DC
 F9AC CCFFFF           LDD #$FFFF
 F9AF FDDFD4           STD D1
 F9B2 CC0000           LDD #0
 F9B5 FDDFD6           STD DM
 F9B8 C60B             LDB #11
 F9BA 17FCCB           LBSR FIGSF
 F9BD 3586             PULS A,B,PC
                      *
                      * Set text cursor.
 F9BF 3416            SETCRT PSHS A,B,X
 F9C1 BFDFE5           STX CURSOR
 F9C4 8649             LDA #$49
 F9C6 17FC57           LBSR GCOM
 F9C9 1F10             TFR X,D
 F9CB 1E89             EXG A,B
 F9CD 17FC62           LBSR GPRM
 F9D0 1E89             EXG A,B
 F9D2 17FC5D           LBSR GPRM
 F9D5 8608             LDA #$08
 F9D7 17FC58           LBSR GPRM
 F9DA 3596             PULS A,B,X,PC


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 30
Ver 6.2    D.A.Rumball    2023-05-20

                      *
                      * Get text cursor.
 F9DC 3406            GETCRT PSHS A,B
 F9DE 86E0             LDA #$E0
 F9E0 17FC3D           LBSR GCOM
 F9E3 17FC5B           LBSR GPRMI
 F9E6 1F89             TFR A,B
 F9E8 17FC56           LBSR GPRMI
 F9EB 1F01             TFR D,X
 F9ED BFDFE5           STX CURSOR
 F9F0 17FC4E           LBSR GPRMI
 F9F3 17FC4B           LBSR GPRMI
 F9F6 17FC48           LBSR GPRMI
 F9F9 3586             PULS A,B,PC
                      *
                      * Set display to text.
 F9FB 3476            TEXT PSHS A,B,X,Y,U
 F9FD 5F               CLRB
 F9FE 17FDD4           LBSR MODE
 FA01 84F6             ANDA #$F6
 FA03 5C               INCB
 FA04 17FDCE           LBSR MODE
 FA07 BEDFEC           LDX TS1
 FA0A FCDFEE           LDD TS2
 FA0D 10BEDFF0         LDY TL1
 FA11 FEDFF2           LDU TL2
 FA14 BDF6D6           JSR SETPAR
 FA17 35F6             PULS A,B,X,Y,U,PC
                      *
                      *Clear text screen.
 FA19 3416            CLEART PSHS D,X
 FA1B 8ECA00           LDX #$CA00
 FA1E 8D9F             BSR SETCRT
 FA20 8E3600           LDX #(48*288)
 FA23 8602             LDA #2
 FA25 BDF844           JSR CLEARX
 FA28 8D1F             BSR TXTPAR
 FA2A 7FDFDA           CLR COL
 FA2D 7FDFD9           CLR ROW
 FA30 7FDFEB           CLR ESCFLG
 FA33 8601             LDA #$01
 FA35 B7DFEA           STA CTYPE
 FA38 8604             LDA #4
 FA3A B7DFE1           STA ATTRI
 FA3D 8DBC             BSR TEXT
 FA3F 7DDFFA           TST CFLAG
 FA42 2702             BEQ CTE
 FA44 8D39             BSR CURS
 FA46 3596            CTE PULS D,X,PC
                      *
 FA48 39              CLINK RTS
                      *
 FA49 8ECA00          TXTPAR LDX #$CA00
 FA4C 1F10             TFR X,D
 FA4E 108E0120         LDY #288
 FA52 CE0000           LDU #0
 FA55 BFDFEC          TXTPR1 STX TS1
 FA58 FDDFEE           STD TS2
 FA5B 10BFDFF0         STY TL1
 FA5F FFDFF2           STU TL2
 FA62 3402             PSHS A


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 31
Ver 6.2    D.A.Rumball    2023-05-20

 FA64 B6DFCB           LDA GMODE
 FA67 8509             BITA #9
 FA69 2702             BEQ TXTPR2
 FA6B 3582             PULS A,PC
 FA6D 3502            TXTPR2 PULS A
 FA6F BDF6D6           JSR SETPAR
 FA72 39               RTS
                      *
 FA73 3406            GDCOUT PSHS D
 FA75 C6D2             LDB #$D2 draw character
 FA77 F7FF15           STB $FF15
 FA7A B7FF14           STA $FF14
 FA7D 3586             PULS D,PC
                      *
                      * Invert cursor at current position
 FA7F 3406            CURS PSHS D
 FA81 C6D5             LDB #$D5 toggle cursor
 FA83 F7FF15           STB $FF15
 FA86 3586            CUREND PULS D,PC
                      *
                      *
                      * IRQ handler 
 FA88 B6FF40          irqhdl    lda     $FF40 clear TMR flag
 FA8B 3B                        rti 
                      *
                                                                                                                                                                     
                      *
                      ********************************
                      *    System specific Boot      *
                      *    command goes here.        *
                      ********************************
                      *
                      * Boot flex.
 FA8C 0D426F6F74696E  BFMESS FCC $0D,'Booting FLEX from system drive....',4
 FA93 6720464C455820
 FA9A 66726F6D207379
 FAA1 7374656D206472
 FAA8 6976652E2E2E2E
 FAAF 04
 FAB0 0A0D0743616E27  BFRR2 FCC $0A,$0D,7,/Can't find FLEX.COR!/,4
 FAB7 742066696E6420
 FABE 464C45582E434F
 FAC5 522104
 FAC8 464C4558000000  TEXT1 FCC 'FLEX',0,0,0,0
 FACF 00
 FAD0 8EFA8C          BF LDX #BFMESS
 FAD3 BDF4C7           JSR PDATA1
 FAD6 4F               clra reset PROMdisk and RAMdisk mode registers
 FAD7 B7FF24           sta $FF24
 FADA B7FF34           sta $FF34
                       * get the first directory sector of drive 0 (track 0, sector 5)
 FADD 7FDF8E           CLR DRIVE
 FAE0 8EDF8B           LDX #(DRIVE-3)
 FAE3 BDF454           JSR RST
 FAE6 C605             LDB #5
 FAE8 F7DF90           STB SECTOR
 FAEB 4F               CLRA
 FAEC B7DF8F           STA TRACK
 FAEF F6DF90          NSEC LDB SECTOR
 FAF2 B6DF8F           LDA TRACK
 FAF5 8EDE80           LDX #BUFFER


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 32
Ver 6.2    D.A.Rumball    2023-05-20

 FAF8 BDF448           JSR READ
                      * look for 'FLEX' entry in directory
 FAFB 8EDE90           LDX #(BUFFER+16)
 FAFE C60A             LDB #10 ten directory entries per sector
 FB00 108EFAC8        CHK LDY #TEXT1
 FB04 3410             PSHS X
 FB06 A680            CHK1 LDA ,X+
 FB08 A1A0             CMPA ,Y+
 FB0A 260D             BNE NOPE1
 FB0C 108CFAD0         CMPY #(TEXT1+8) end of filename?
 FB10 26F4             BNE CHK1
 FB12 EC05             LDD 5,X match found, pick up starting track/sector
 FB14 FDDF94           STD YTEMP
 FB17 201D             BRA LOAD load file
 FB19 5A              NOPE1 DECB end of entries? 
 FB1A 2707             BEQ NOPE2
 FB1C 3510             PULS X
 FB1E 308818           LEAX 24,X step to next filename
 FB21 20DD             BRA CHK
                      * get next directory sector, stop if end of directory sector chain
 FB23 FCDE80          NOPE2 LDD BUFFER
 FB26 2705             BEQ NOPE3
 FB28 FDDF8F           STD TRACK
 FB2B 20C2             BRA NSEC
 FB2D 8EFAB0          NOPE3 LDX #BFRR2
 FB30 BDF4CE          NO4 JSR PSTRNG
 FB33 7EF0EF           JMP CONTRL
                      *
 FB36 FCDF94          LOAD LDD YTEMP
 FB39 FDDE80           STD BUFFER
 FB3C 108EDF80         LDY #(BUFFER+256)
 FB40 8D34            LOAD1 BSR GETCH
 FB42 8102             CMPA #2
 FB44 270A             BEQ LOAD2
 FB46 8116             CMPA #$16
 FB48 26F6             BNE LOAD1
 FB4A 8D2A             BSR GETCH
 FB4C 8D28             BSR GETCH
 FB4E 20F0             BRA LOAD1
 FB50 8D24            LOAD2 BSR GETCH
 FB52 B7DF96           STA TTO
 FB55 8D1F             BSR GETCH
 FB57 B7DF97           STA TTO+1
 FB5A 8D1A             BSR GETCH
 FB5C 1F89             TFR A,B
 FB5E 5D               TSTB
 FB5F 27DF             BEQ LOAD1
 FB61 BEDF96           LDX TTO
 FB64 3414            LOAD3 PSHS B,X
 FB66 8D0E             BSR GETCH
 FB68 3514             PULS B,X
 FB6A 8CDE00           CMPX #$DE00
 FB6D 2202             BHI LR
 FB6F A780             STA ,X+
 FB71 5A              LR DECB
 FB72 26F0             BNE LOAD3
 FB74 20CA             BRA LOAD1
                      * get the next byte from the file, loading the next sector if needed
 FB76 108CDF80        GETCH CMPY #(BUFFER+256)
 FB7A 2610             BNE GETCH4
 FB7C 8EDE80          GETCH2 LDX #BUFFER


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 33
Ver 6.2    D.A.Rumball    2023-05-20

 FB7F EC84             LDD ,X next sector address
 FB81 270C             BEQ LDONE if 0000 then this was the last sector
 FB83 BDF448           JSR READ
 FB86 26AE             BNE LOAD
 FB88 108EDE84         LDY #BUFFER+4
 FB8C A6A0            GETCH4 LDA ,Y+
 FB8E 39               RTS
                      *
 FB8F 8ED3E5          LDONE LDX #$D3E5
 FB92 108EFBE7         LDY #CONTAB Overlay console driver table
 FB96 ECA1            LD1 LDD 0,Y++
 FB98 ED81             STD 0,X++
 FB9A 8CD3FD           CMPX #$D3FD
 FB9D 26F7             BNE LD1
 FB9F 8EDE00           LDX #$DE00 Overlay disk driver table
 FBA2 108EFBFF         LDY #DISTAB
 FBA6 ECA1            LD2 LDD 0,Y++
 FBA8 ED81             STD 0,X++
 FBAA 8CDE1E           CMPX #$DE1E
 FBAD 26F7             BNE LD2
                      *
 FBAF 8639             LDA #$39
 FBB1 B7CA02           STA $CA02  Disable date prompt and set date.
 FBB4 C608             LDB #MONTH
 FBB6 BDF5C9           JSR GETRTC
 FBB9 B7CC0E           STA $CC0E      month
 FBBC C607             LDB #DAY
 FBBE BDF5C9           JSR GETRTC
 FBC1 B7CC0F           STA $CC0F      day
 FBC4 C609             LDB #YEAR
 FBC6 BDF5C9           JSR GETRTC
 FBC9 B7CC10           STA $CC10      year
                      *
 FBCC 8ECC00           LDX  #$CC00  Set ASN & TTYSET parameters from the RTC.
 FBCF C614             LDB  #$14
 FBD1 BDF5C9          FLP  JSR GETRTC
 FBD4 A780             STA  0,X+
 FBD6 5C               INCB
 FBD7 C121             CMPB  #$21
 FBD9 26F6             BNE  FLP
                      *
 FBDB 8EFA88          BOEND ldx #irqhdl set dummy IRQ handler
 FBDE BFFFF8           stx $FFF8
 FBE1 8ECD00           LDX #$CD00 Flex cold start address
 FBE4 7EF616           JMP MAPOUT Geronimo!!
                      *
                      * FLEX console jump table.
 FBE7 F183            CONTAB FDB INCH1
 FBE9 F160             FDB DUMMY
 FBEB FFFE             FDB $FFFE
 FBED FFFE             FDB $FFFE
 FBEF F160             FDB DUMMY
 FBF1 F160             FDB DUMMY
 FBF3 F160             FDB DUMMY
 FBF5 F0EF             FDB CONTRL
 FBF7 F160             FDB DUMMY
 FBF9 F161             FDB STATUS
 FBFB F19E             FDB OUTCH
 FBFD F19C             FDB INCH
                      *
                      * FLEX disk jump table.


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 34
Ver 6.2    D.A.Rumball    2023-05-20

 FBFF 7EF448          DISTAB JMP READ
 FC02 7EF44C           JMP WRITE
 FC05 7EF450           JMP VERIFY
 FC08 7EF454           JMP RST
 FC0B 7EF45D           JMP DRV
 FC0E 7EF490           JMP CHKRDY
 FC11 7EF494           JMP QUICK
 FC14 7EF498           JMP DINIT
 FC17 7EF4B0           JMP WARM
 FC1A 7EF4B4           JMP SEEK
                      *
                      *
                      * Boot OS9 from the internal pre loaded image in RAM
 FC1D 0D426F6F74696E  BOMESS FCC $0D,'Booting internal OS9 L1....',$0A,$0A,$0D,4
 FC24 6720696E746572
 FC2B 6E616C204F5339
 FC32 204C312E2E2E2E
 FC39 0A0A0D04
 FC3D 8EFC1D          BO LDX #BOMESS
 FC40 BDF4C7           JSR PDATA1
                      * 
 FC43 8EFFE2           ldx #$FFE2 change int vectors for OS9
 FC46 108EFFF2         ldy #$FFF2
 FC4A EC81            o1l ldd ,x++
 FC4C EDA1             std ,y++
 FC4E 8CFFFC           cmpx #$FFF2+10
 FC51 26F7             BNE o1l
                      *
 FC53 B6FF02           LDA SYSREG map in shadow RAM
 FC56 84FB             ANDA #$FB
 FC58 B7FF02           STA SYSREG
                      *
                      * copy OS9 modules from $0000 -> $C000 (12KB)
 FC5B 8E0000           ldx #0
 FC5E 108E3000         ldy #(12*1024)
 FC62 A680            bolp lda ,x+
 FC64 A789BFFF         sta $BFFF,x
 FC68 313F             leay -1,y
 FC6A 26F6             bne bolp
                      *               
 FC6C 7EC053           jmp $C053 OS9 kernel cold start address  FIXME - hard coded address!
                      *
                      *
                       ORG PROM
                      KEYREG EQU $FF00
                      PIACA EQU $FF01
                      SYSREG EQU $FF02
                      PIACB EQU $FF03
                      *
                      ACIAD1 EQU $FF08
                      ACIAC1 EQU $FF09
                      ACIAD2 EQU $FF04
                      ACIAC2 EQU $FF05
                      BAUD1 EQU $FF0C
                      BAUD2 EQU $FF0D
                      *
                      GDCPRM EQU $FF14
                      GDCCOM EQU $FF15
                      *
                      RTCADD EQU $FF18
                      RTCDAT EQU $FF19


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 35
Ver 6.2    D.A.Rumball    2023-05-20

                      *
                      PORTA EQU $FF1C
                      PORTB EQU $FF1D
                      PORTC EQU $FF1E
                      BITCON EQU $FF1F
                      *
 E000 0A0D2B2B2B204D  HDR FCC $0A,$0D,'+++ Mon09 Ver 6.2 (FLEX+OS9L1) D.A.Rumball 2023 +++',4
 E007 6F6E3039205665
 E00E 7220362E322028
 E015 464C45582B4F53
 E01C 394C312920442E
 E023 412E52756D6261
 E02A 6C6C2032303233
 E031 202B2B2B04
 E036 0A0D3D3E04      PROMPT FCC $0A,$0D,'=>',4
 E03B 0720556E6B6E6F  NOTTHS FCC 7,' Unknown command! ',4
 E042 776E20636F6D6D
 E049 616E64212004
 E04F 07554E45585045  UNMESS FCC 7,'UNEXPECTED INTERUPT!',4
 E056 4354454420494E
 E05D 54455255505421
 E064 04
 E065 070707506F7765  FAILMS FCC 7,7,7,'Power failure in RTC, reloading defaults',4
 E06C 72206661696C75
 E073 726520696E2052
 E07A 54432C2072656C
 E081 6F6164696E6720
 E088 64656661756C74
 E08F 7304
                      *
 E091 0F              RTCTAB FCB %00001111 no 2Mhz, no 256k, 128k Promdisk, 30ms step rate.
 E092 AA               FCB $AA powerfail flag
 E093 000102FF         FCB 0,1,2,$FF promdisk, ramdisk, f-ramdisk, unassigned
 E097 08003A18500000   FCB $08,0,$3A,$18,$50,0,0,$08,0,0,$1B TTYSET parameters.
 E09E 0800001B
 E0A2 0001             FCB 0,1 ASN parameters.
 E0A4 00000000000000   FCB $00,$00,$00,$00,$00,$00,$00,$00 GDC timing parameters
 E0AB 00
 E0AC 00000000000000   FCB 0,0,0,0,0,0,0 reserved
 E0B3 00112233445566   FCB $00,$11,$22,$33,$44,$55,$66,$77,$88,$99,$AA,$BB,$CC,$DD,$EE,$FF user params
 E0BA 778899AABBCCDD
 E0C1 EEFF
 E0C3 07140713         FCB 7,20,7,19 (Sat 20th July 2019, MB2K2's birthday!)
                       *
 E0C7 BFDF98          MINIT STX RNDM seed random number generator.
                      * Check that RTC data is ok.
 E0CA C60D             LDB #$0D
 E0CC BDF5C9           JSR GETRTC
 E0CF 8480             ANDA #$80
 E0D1 B7DFB5           STA RTCFAIL
                      * Get iport and oport.
 E0D4 B6FF02           LDA SYSREG
 E0D7 43               COMA
 E0D8 44               LSRA
 E0D9 44               LSRA
 E0DA 44               LSRA
 E0DB 44               LSRA
 E0DC 1F89             TFR A,B
 E0DE C401             ANDB #$01
 E0E0 F7DF8C           STB IPORT
 E0E3 1F89             TFR A,B


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 36
Ver 6.2    D.A.Rumball    2023-05-20

 E0E5 54               LSRB
 E0E6 C401             ANDB #$01
 E0E8 F7DF8D           STB OPORT
                      * Set up rtc defaults if
                      * there has been a power failure.
 E0EB 7DDFB5           TST RTCFAIL
 E0EE 261B             BNE SUD
 E0F0 8EE091           LDX #RTCTAB
 E0F3 C60E             LDB #$0E
 E0F5 A680            RTCLOOP LDA ,X+
 E0F7 BDF5E7           JSR PUTRTC
 E0FA 5C               INCB
 E0FB C140             CMPB #$40
 E0FD 26F6             BNE RTCLOOP
                      * set a default date 
 E0FF C606             LDB #06
 E101 A680            RTCLP1 LDA ,X+
 E103 BDF5E7           JSR PUTRTC
 E106 5C               INCB
 E107 C10A             CMPB #$0A
 E109 26F6             BNE RTCLP1
                      *
                      * Set up drive step rate.
 E10B C60E            SUD LDB #$0E
 E10D BDF5C9           JSR GETRTC
 E110 1F89             TFR A,B
                      *
 E112 1F98             TFR B,A
 E114 840C             ANDA #$0C
 E116 44               LSRA
 E117 44               LSRA
 E118 B7DFF7           STA STEP0
                      *
                      * Reset fdc.
 E11B 4F               CLRA
 E11C BBDFF7           ADDA STEP0
 E11F B7FF10           STA COMREG
                      *
                      * Set up gdc.
 E122 BDF879          SUGDC JSR GDCINIT
                      * INC CFLAG enable text cursor
                      * Set up initial drive type table.
 E125 C610             LDB #$10
 E127 8EDF9D           LDX #DDSTAB
 E12A BDF5C9          F1A JSR GETRTC
 E12D A780             STA ,X+
 E12F 5C               INCB
 E130 C114             CMPB #$14
 E132 26F6             BNE F1A
                      *
 E134 7DDFB5           TST RTCFAIL
 E137 260B             BNE CONT
 E139 8EE065           LDX #FAILMS
 E13C BDF4CE           JSR PSTRNG
 E13F 8680             LDA #$80
 E141 B7DFB5           STA RTCFAIL
 E144 B6FF02          CONT LDA SYSREG check for autoboot and OS choice
 E147 43               COMA
 E148 84C0             anda   #$C0
 E14A 81C0             cmpa   #$C0 boot OS9
 E14C 10271AED         lbeq   BO


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 37
Ver 6.2    D.A.Rumball    2023-05-20

 E150 8180             cmpa   #$80 boot FLEX
 E152 1027197A         lbeq   BF
                      *
 E156 7EF0E9           JMP MINITR
                      ***************************
                      * Jump table for commands *
                      ***************************
 E159 4455            COMTAB FCC 'DU' Hex and ASCII dump.
 E15B E361             FDB DU
 E15D 4D45             FCC 'ME' Memory examine and alter.
 E15F E45F             FDB ME
 E161 504F             FCC 'PO' Poke single memory with value (no verification of data).
 E163 E3DB             FDB PO
 E165 5045             FCC 'PE' Peek single memory location.
 E167 E40A             FDB PE
 E169 464D             FCC 'FM' Fill memory with a constant value.
 E16B E295             FDB FM
                      *
 E16D 5349             FCC 'SI' Set input port.
 E16F E214             FDB SI
 E171 534F             FCC 'SO' Set output port.
 E173 E23A             FDB SO
                      *
 E175 4A55             FCC 'JU' Jump to program .
 E177 E1CF             FDB JU
 E179 5250             FCC 'RP' Run program .
 E17B E2D3             FDB RP
 E17D 4350             FCC 'CP' Continue program after SWI.
 E17F E262             FDB CP
 E181 4250             FCC 'BP' set a breakpoint.
 E183 EA7C             FDB BP
 E185 4452             FCC 'DR' Display cpu registers.
 E187 E4D9             FDB DR
                      *
 E189 5453             FCC 'TS' Drive stepping and select test.
 E18B E8EC             FDB TS
 E18D 5444             FCC 'TD' Test random read on drive.
 E18F E86A             FDB TD
 E191 4446             FCC 'DF' Format disc to FLEX format.
 E193 E723             FDB DF
 E195 5253             FCC 'RS' Read sector from drive.
 E197 E612             FDB RS
 E199 5753             FCC 'WS' Write sector to drive.
 E19B E686             FDB WS
                      *
 E19D 424F             FCC 'BO' Boot OS9 from the internal pre loaded image in RAM
 E19F FC3D             FDB BO
 E1A1 4246             FCC 'BF' Boot from Flex.cor image on drive 0.
 E1A3 FAD0             FDB BF
 E1A5 4A46             FCC 'JF' Jump to flex warm start ($CD03).
 E1A7 E1F4             FDB JF
                      *
 E1A9 544D             FCC 'TM' Quick memory test.
 E1AB E550             FDB TM
                      *
                      *************************************
                      * Extra system dependant command    *
                      * entries fit here.                 *
                      *************************************
 E1AD 4443             FCC 'DC' Display RTC contents.
 E1AF E93A             FDB DCLK


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 38
Ver 6.2    D.A.Rumball    2023-05-20

 E1B1 4D43             FCC 'MC' Modify RTC contents.
 E1B3 EA23             FDB MC
 E1B5 524D             FCC 'RM' Remote mount PROMdisk image
 E1B7 EB83             FDB RM
                      *
 E1B9 FF               FCB $FF End of table flag.
                      *
                      ***************************
                      * Common system commands. *
                      ***************************
                      *
                      * Jump to program.
 E1BA 0D4A756D702074  JUMES FCC $0D,'Jump to program at ',4
 E1C1 6F2070726F6772
 E1C8 616D2061742004
 E1CF 8EE1BA          JU        LDX     #JUMES
 E1D2 BDF4C7                    JSR     PDATA1
 E1D5 BDF4FC                    JSR     BADDR
 E1D8 6E84             JMP ,X
                      *
                      * Jump to flex warm start.
 E1DA 0D4A756D702074  JFMES FCC $0D,'Jump to flex warm start.',4
 E1E1 6F20666C657820
 E1E8 7761726D207374
 E1EF 6172742E04
 E1F4 8EE1DA          JF        LDX     #JFMES
 E1F7 BDF4C7                    JSR     PDATA1
 E1FA 8ECD03           LDX #$CD03
 E1FD 7EF616           JMP MAPOUT
                      *
                      * Set input port.
 E200 0D53657420696E  SIMES FCC $0D,'Set input port to ',4
 E207 70757420706F72
 E20E 7420746F2004
 E214 8EE200          SI        LDX     #SIMES
 E217 BDF4C7                    JSR     PDATA1
 E21A BDF52C                    JSR     INHEX
 E21D 8403                      ANDA    #$03
 E21F B7DF8C                    STA     IPORT
 E222 7EF0EF                    JMP     CONTRL
                      *
                      * Set output port.
 E225 0D536574206F75  SOMES FCC $0D,'Set output port to ',4
 E22C 7470757420706F
 E233 727420746F2004
 E23A 8EE225          SO        LDX     #SOMES
 E23D BDF4C7                    JSR     PDATA1
 E240 BDF52C                    JSR     INHEX
 E243 8403                      ANDA    #$03
 E245 B7DF8D                    STA     OPORT
 E248 7EF0EF                    JMP     CONTRL
                      *
                      * Continue program.
 E24B 0D436F6E74696E  CONPRS FCC $0D,'Continue from SWI....',4
 E252 75652066726F6D
 E259 205357492E2E2E
 E260 2E04
 E262 8EE24B          CP        LDX     #CONPRS
 E265 BDF4C7                    JSR     PDATA1
 E268 6C6B                      INC     11,S
 E26A 7EE2E2                    JMP     RP1


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 39
Ver 6.2    D.A.Rumball    2023-05-20

                      *
                      * Fill memory with constant.
 E26D 0D46696C6C206D  FILMES FCC $0D,'Fill memory with constant from ',4
 E274 656D6F72792077
 E27B 69746820636F6E
 E282 7374616E742066
 E289 726F6D2004
 E28E 20776974682004  VALUES FCC ' with ',4
 E295 8EE26D          FM        LDX     #FILMES
 E298 BDF4C7                    JSR     PDATA1
 E29B BDF4FC                    JSR     BADDR
 E29E 1F12                      TFR     X,Y
 E2A0 8EE5F8                    LDX     #TOS
 E2A3 BDF4C7                    JSR     PDATA1
 E2A6 BDF4FC                    JSR     BADDR
 E2A9 3410                      PSHS    X
 E2AB 8EE28E                    LDX     #VALUES
 E2AE BDF4C7                    JSR     PDATA1
 E2B1 BDF507                    JSR     BYTE
 E2B4 A7A0            FM1       STA     ,Y+
 E2B6 10ACE4                    CMPY    ,S
 E2B9 26F9                      BNE     FM1
 E2BB 3510                      PULS    X
 E2BD 7EF0EF                    JMP     CONTRL
                      *
                      * Go to user routine at XXXX.
 E2C0 0D52756E207072  RUNPRS FCC $0D,'Run program from ',4
 E2C7 6F6772616D2066
 E2CE 726F6D2004
 E2D3 8EE2C0          RP        LDX     #RUNPRS
 E2D6 BDF4C7                    JSR     PDATA1
 E2D9 BDF4FC                    JSR     BADDR
 E2DC AF6A                      STX     10,S
 E2DE 86FF                      LDA     #$FF
 E2E0 A7E4                      STA     ,S
 E2E2 10FEDF80        RP1       LDS     STACK
 E2E6 3B                        RTI
                      *
                      * SWI  return from user program.
 E2E7 10FFDF80        FSWI      STS     STACK
 E2EB AE6A                      LDX     10,S
 E2ED 301F                      LEAX    -1,X
 E2EF AF6A                      STX     10,S
 E2F1 7EE4DF                            JMP     DR1
                      *
                      * dump of memory starting at XXXX.
 E2F4 0D48657820616E  HEXDUS FCC $0D,'Hex and ASCII dump of memory from ',4
 E2FB 64204153434949
 E302 2064756D70206F
 E309 66206D656D6F72
 E310 792066726F6D20
 E317 04
 E318 20202020203020  HDMES1 FCC '     0  1  2  3  4  5  6  7   8  9  A  B  C  D  E  F    0123456789ABCDEF',4
 E31F 20312020322020
 E326 33202034202035
 E32D 20203620203720
 E334 20203820203920
 E33B 20412020422020
 E342 43202044202045
 E349 20204620202020
 E350 30313233343536


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 40
Ver 6.2    D.A.Rumball    2023-05-20

 E357 37383941424344
 E35E 454604
 E361 8EE2F4          DU        LDX     #HEXDUS
 E364 BDF4C7                    JSR     PDATA1
 E367 BDF4FC                    JSR     BADDR
 E36A BDF4BB                    JSR     PCRLF
                      * 16 bytes to a row, 16 rows
 E36D 108E0010        HD4       LDY     #16
 E371 BDF4BB                    JSR     PCRLF
 E374 3410                      PSHS    X
 E376 8EE318                    LDX     #HDMES1
 E379 BDF4CE                    JSR     PSTRNG
 E37C 3510                      PULS    X
 E37E BDF4BB          HD1       JSR     PCRLF
 E381 BDF4DF                    JSR     PRINTX
 E384 C610                      LDB     #16
 E386 BDF556          HD2       JSR     OUT2HS
 E389 5A                        DECB
 E38A 2709                      BEQ     HAD3
 E38C C108                      CMPB    #8
 E38E 26F6                      BNE     HD2
 E390 BDF558                    JSR     OUTS
 E393 20F1                      BRA     HD2
                      * print out data again as ASCII chars
 E395 BDF558          HAD3      JSR     OUTS
 E398 BDF558                    JSR     OUTS
 E39B C610                      LDB     #16
 E39D 3010                      LEAX    -16,X
 E39F A680            HAD2      LDA     0,X+
 E3A1 8120                      CMPA    #32
 E3A3 2D04                      BLT     HAD4
 E3A5 817F                      CMPA    #$7F
 E3A7 2D02                      BLT     HAD5
 E3A9 862E            HAD4      LDA     #'.
 E3AB BDF19E          HAD5      JSR     OUTCH
 E3AE 5A                        DECB
 E3AF 2702                      BEQ     HD3
 E3B1 20EC                      BRA     HAD2
                      *
 E3B3 313F            HD3       LEAY    -1,Y
 E3B5 26C7                      BNE     HD1
 E3B7 BDF19C                    JSR     INCH
 E3BA 810D                      CMPA    #$0D go forward a page
 E3BC 27AF                      BEQ     HD4
 E3BE 812D                      CMPA    #'- go back a page
 E3C0 10260D2B                  LBNE    CONTRL
 E3C4 3089FE00                  FDB $3089,$FE00 assembler bug!!! LEAX    -512,X
 E3C8 20A3                      BRA     HD4
                      *
                      * Poke memory.
 E3CA 0D506F6B65206D  POKMES FCC $0D,'Poke memory at ',4
 E3D1 656D6F72792061
 E3D8 742004
 E3DB 8EE3CA          PO        LDX     #POKMES
 E3DE BDF4C7                    JSR     PDATA1
 E3E1 BDF4FC                    JSR     BADDR
 E3E4 1F12                      TFR     X,Y
 E3E6 8EE28E                    LDX     #VALUES
 E3E9 BDF4C7                    JSR     PDATA1
 E3EC BDF507                    JSR     BYTE
 E3EF A720                      STA     0,Y


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 41
Ver 6.2    D.A.Rumball    2023-05-20

 E3F1 7EF0EF                    JMP     CONTRL
                      *
                      * Peek memory.
 E3F4 0D5065656B206D  PEKMES FCC $0D,'Peek memory at ',4
 E3FB 656D6F72792061
 E402 742004
 E405 202D3E2004      PEMES1 FCC  ' -> ',4
 E40A 8EE3F4          PE        LDX     #PEKMES
 E40D BDF4C7                    JSR     PDATA1
 E410 BDF4FC                    JSR     BADDR
 E413 1F12                      TFR     X,Y
 E415 8EE405                    LDX     #PEMES1
 E418 BDF4C7                    JSR     PDATA1
 E41B 1F21                      TFR     Y,X
 E41D BDF54C                    JSR     OUT2H
 E420 7EF0EF                    JMP     CONTRL
                      *
                      * Memory load and examine.
 E423 0D4D656D6F7279  MEMEXS FCC $0D,'Memory examine and modify from ',4
 E42A 206578616D696E
 E431 6520616E64206D
 E438 6F646966792066
 E43F 726F6D2004
 E444 0720204E6F2072  NORAM FCC 7,'  No ram at that address!',4
 E44B 616D2061742074
 E452 68617420616464
 E459 726573732104
 E45F 8EE423          ME        LDX     #MEMEXS
 E462 BDF4C7                    JSR     PDATA1
 E465 BDF4FC                    JSR     BADDR
 E468 BDF4BB          ME1       JSR     PCRLF
 E46B BDF4DF                    JSR     PRINTX
 E46E BDF556                    JSR     OUT2HS
 E471 BDF19C                    JSR     INCH
 E474 812D                      CMPA    #'-
 E476 2604                      BNE     ME2
 E478 301E                      LEAX    -2,X
 E47A 20EC                      BRA     ME1
 E47C 810D            ME2       CMPA    #$0D
 E47E 27E8                      BEQ     ME1
 E480 8120                      CMPA    #$20
 E482 10260C69        MED       LBNE    CONTRL
 E486 BDF507                    JSR     BYTE
 E489 A71F                      STA     -1,X
 E48B A11F                      CMPA    -1,X
 E48D 27D9                      BEQ     ME1
 E48F 8EE444                    LDX     #NORAM
 E492 BDF4C7                    JSR     PDATA1
 E495 7EF0EF                    JMP     CONTRL
                      *
                      * Print registers.
 E498 0D446973706C61  DISRES FCC $0D,'Display CPU registers.',4
 E49F 79204350552072
 E4A6 65676973746572
 E4AD 732E04
 E4B0 0A0D4343202041  RSTRNG FCC $0A,$0D,'CC  A  B DP    X    Y    U   PC    S',$0A,$0D,4
 E4B7 20204220445020
 E4BE 20202058202020
 E4C5 20592020202055
 E4CC 20202050432020
 E4D3 2020530A0D04


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 42
Ver 6.2    D.A.Rumball    2023-05-20

 E4D9 8EE498          DR LDX #DISRES
 E4DC BDF4C7                    JSR     PDATA1
 E4DF 8EE4B0          DR1 LDX #RSTRNG
 E4E2 BDF4C7                    JSR    PDATA1
 E4E5 1F41                      TFR     S,X
 E4E7 BDF556                    JSR    OUT2HS
 E4EA BDF556                    JSR    OUT2HS
 E4ED BDF556                    JSR    OUT2HS
 E4F0 BDF556                    JSR    OUT2HS
 E4F3 BDF554                    JSR    OUT4HS
 E4F6 BDF554                    JSR    OUT4HS
 E4F9 BDF554                    JSR    OUT4HS
 E4FC BDF554                    JSR    OUT4HS
 E4FF 8EDF80                    LDX     #STACK
 E502 BDF554                    JSR    OUT4HS
 E505 7EF0EF                    JMP    CONTRL
                      *
                      * Test memory.
 E508 0D54657374206D  TESMES FCC $0D,'Test memory from ',4
 E50F 656D6F72792066
 E516 726F6D2004
 E51B 070A0D4572726F  TMS1 FCC 7,$0A,$0D,'Error at location ',4
 E522 72206174206C6F
 E529 636174696F6E20
 E530 04
 E531 6368616E676564  TMS2 FCC 'changed to ',4
 E538 20746F2004
 E53D 2054657374696E  TMS3 FCC ' Testing now with ',4
 E544 67206E6F772077
 E54B 6974682004
 E550 8EE508          TM        LDX     #TESMES
 E553 BDF4C7                    JSR     PDATA1
 E556 BDF4FC                    JSR     BADDR
 E559 1F12                      TFR     X,Y
 E55B 8EE5F8                    LDX     #TOS
 E55E BDF4C7                    JSR     PDATA1
 E561 BDF4FC                    JSR     BADDR
 E564 BFDF92                    STX     XTEMP
 E567 5F                        CLRB
 E568 8EE53D                    LDX     #TMS3
 E56B BDF4C7                    JSR     PDATA1
 E56E F7DF91          TM5       STB     TEMP
 E571 8EDF91                    LDX     #TEMP
 E574 BDF54C                    JSR     OUT2H
 E577 1F21                      TFR     Y,X
 E579 E720            TM1       STB     0,Y
 E57B E120                      CMPB    0,Y
 E57D 261A                      BNE     TM2
 E57F 3121            TM4       LEAY    1,Y
 E581 10BCDF92                  CMPY    XTEMP
 E585 26F2                      BNE     TM1
 E587 5C                        INCB
 E588 270C                      BEQ     TM3
 E58A 8608                      LDA     #$08
 E58C BDF19E                    JSR     OUTCH
 E58F BDF19E                    JSR     OUTCH
 E592 1F12                      TFR     X,Y
 E594 20D8                      BRA     TM5
 E596 7EF0EF          TM3       JMP     CONTRL
 E599 8EE51B          TM2       LDX     #TMS1
 E59C BDF4C7                    JSR     PDATA1


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 43
Ver 6.2    D.A.Rumball    2023-05-20

 E59F 10BFDF92                  STY     XTEMP
 E5A3 8EDF92                    LDX     #XTEMP
 E5A6 BDF554                    JSR     OUT4HS
 E5A9 BDF558                    JSR     OUTS
 E5AC BDF558                    JSR     OUTS
 E5AF F7DF91                    STB     TEMP
 E5B2 8EDF91                    LDX     #TEMP
 E5B5 BDF556                    JSR     OUT2HS
 E5B8 8EE531                    LDX     #TMS2
 E5BB BDF4C7                    JSR     PDATA1
 E5BE A620                      LDA     0,Y
 E5C0 B7DF91                    STA     TEMP
 E5C3 8EDF91                    LDX     #TEMP
 E5C6 BDF556                    JSR     OUT2HS
 E5C9 20CB                      BRA     TM3
                      *
                      * Read floppy sector.
 E5CB 0D526561642066  REASES FCC $0D,'Read from sector on drive ',4
 E5D2 726F6D20736563
 E5D9 746F72206F6E20
 E5E0 64726976652004
 E5E7 20747261636B20  TRACS FCC ' track ',4
 E5EE 04
 E5EF 20736563746F72  SECSS FCC ' sector ',4
 E5F6 2004
 E5F8 20746F2004      TOS  FCC ' to ',4
 E5FD 0D0A0746444320  ERR1 FCC $0D,$0A,7,'FDC error code = ',4
 E604 6572726F722063
 E60B 6F6465203D2004
 E612 8EE5CB          RS LDX #REASES
 E615 BDF4C7           JSR PDATA1
 E618 BDF52C           JSR INHEX
 E61B B7DF8E           STA DRIVE
 E61E 8EDF8B           LDX #(DRIVE-3)
 E621 BDF45D           JSR DRV
 E624 8EE5E7           LDX #TRACS
 E627 BDF4C7           JSR PDATA1
 E62A BDF507           JSR BYTE
 E62D B7DF8F           STA TRACK
 E630 8EE5EF           LDX #SECSS
 E633 BDF4C7           JSR PDATA1
 E636 BDF507           JSR BYTE
 E639 B7DF90           STA SECTOR
 E63C 8EE5F8           LDX #TOS
 E63F BDF4C7           JSR PDATA1
 E642 BDF4FC           JSR BADDR
 E645 B6DF8F           LDA TRACK
 E648 F6DF90           LDB SECTOR
 E64B BDF448           JSR READ
 E64E 10270A9D         LBEQ CONTRL
 E652 8EE5FD           LDX #ERR1
 E655 BDF4C7           JSR PDATA1
 E658 F7DF91           STB TEMP
 E65B 8EDF91           LDX #TEMP
 E65E BDF556           JSR OUT2HS
 E661 7EF0EF           JMP CONTRL
                      *
                      * Write floppy sector
 E664 0D577269746520  WRIMES FCC $0D,'Write to sector on drive ',4
 E66B 746F2073656374
 E672 6F72206F6E2064


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 44
Ver 6.2    D.A.Rumball    2023-05-20

 E679 726976652004
 E67F 2066726F6D2004  FROMS FCC ' from ',4
 E686 8EE664          WS LDX #WRIMES
 E689 BDF4C7           JSR PDATA1
 E68C BDF52C           JSR INHEX
 E68F B7DF8E           STA DRIVE
 E692 8EDF8B           LDX #(DRIVE-3)
 E695 BDF45D           JSR DRV
 E698 8EE5E7           LDX #TRACS
 E69B BDF4C7           JSR PDATA1
 E69E BDF507           JSR BYTE
 E6A1 B7DF8F           STA TRACK
 E6A4 8EE5EF           LDX #SECSS
 E6A7 BDF4C7           JSR PDATA1
 E6AA BDF507           JSR BYTE
 E6AD B7DF90           STA SECTOR
 E6B0 8EE67F           LDX #FROMS
 E6B3 BDF4C7           JSR PDATA1
 E6B6 BDF4FC           JSR BADDR
 E6B9 B6DF8F           LDA TRACK
 E6BC F6DF90           LDB SECTOR
 E6BF BDF44C           JSR WRITE
 E6C2 10270A29         LBEQ CONTRL
 E6C6 8EE5FD           LDX #ERR1
 E6C9 BDF4C7           JSR PDATA1
 E6CC F7DF91           STB TEMP
 E6CF 8EDF91           LDX #TEMP
 E6D2 BDF556           JSR OUT2HS
 E6D5 7EF0EF           JMP CONTRL
                      *
                      * Format disc to FLEX standard.
 E6D8 0D466F726D6174  DISFOS FCC $0D,'Format disc for Flex (40tr/10sec - 390 sectors) on drive ',4
 E6DF 20646973632066
 E6E6 6F7220466C6578
 E6ED 2028343074722F
 E6F4 3130736563202D
 E6FB 20333930207365
 E702 63746F72732920
 E709 6F6E2064726976
 E710 652004
 E713 2061726520796F  SURES FCC ' are you sure? ',4
 E71A 7520737572653F
 E721 2004
 E723 8EE6D8          DF LDX #DISFOS
 E726 BDF4C7           JSR PDATA1
 E729 BDF52C           JSR INHEX
 E72C B7DF8E           STA DRIVE
 E72F 8EDF8B           LDX #(DRIVE-3)
 E732 BDF45D           JSR DRV select drive
                      *
 E735 8EE713           LDX #SURES
 E738 BDF4C7           JSR PDATA1
 E73B BDF19C           JSR INCH
 E73E 8159             CMPA #'Y
 E740 102609AB         LBNE CONTRL
                      *
                      * format is 40 tracks of 10 sectors 
 E744 4F              FMT CLRA initial track = 0
 E745 B7DF8F           STA TRACK
 E748 4C               INCA
 E749 B7DF90           STA SECTOR initial sector = 1


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 45
Ver 6.2    D.A.Rumball    2023-05-20

                      * 
 E74C 8EDE80          FMT1 LDX #BUFFER sector buffer
 E74F B6DF8F           LDA TRACK
 E752 F6DF90           LDB SECTOR
 E755 5C               INCB
 E756 C10B             CMPB #11 end of track?
 E758 2603             BNE FMT1A
 E75A C601             LDB #1 set link to 1st sector of next track
 E75C 4C               INCA
 E75D A780            FMT1A STA ,X+ store link
 E75F E780             STB ,X+
                      *
 E761 4F               CLRA clear remainder of buffer
 E762 C6FE             LDB #254
 E764 A780            WABT1 STA ,X+
 E766 5A               DECB
 E767 26FB             BNE WABT1
                      *
 E769 B6DF8F           LDA TRACK write out the sector
 E76C F6DF90           LDB SECTOR
 E76F 8EDE80           LDX #BUFFER
 E772 170CD7           LBSR WRITE
                      *
 E775 F6DF90           LDB SECTOR
 E778 5C               INCB
 E779 C10B             CMPB #11 end of track?
 E77B 2705             BEQ FMT2
 E77D F7DF90           STB SECTOR
 E780 20CA             BRA FMT1
                      *
 E782 B6DF8F          FMT2 LDA TRACK
 E785 4C               INCA
 E786 8128             CMPA #40 end of raw format
 E788 270A             BEQ FMT3
 E78A B7DF8F           STA TRACK
 E78D C601             LDB #1
 E78F F7DF90           STB SECTOR
 E792 20B8             BRA FMT1
                      *
 E794 8EDE80          FMT3 LDX #BUFFER clear forward link on last sector of 1st and last tracks
 E797 4F               CLRA
 E798 C60A             LDB #10
 E79A BDF448           JSR READ
 E79D 8EDE80           LDX #BUFFER
 E7A0 6F84             CLR ,X
 E7A2 6F01             CLR 1,X
 E7A4 4F               CLRA
 E7A5 C60A             LDB #10
 E7A7 BDF44C           JSR WRITE
                      *
 E7AA 8EDE80           LDX #BUFFER 
 E7AD 8627             LDA #39
 E7AF C60A             LDB #10
 E7B1 BDF448           JSR READ
 E7B4 8EDE80           LDX #BUFFER
 E7B7 6F84             CLR ,X
 E7B9 6F01             CLR 1,X
 E7BB 8627             LDA #39
 E7BD C60A             LDB #10
 E7BF BDF44C           JSR WRITE
                      *


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 46
Ver 6.2    D.A.Rumball    2023-05-20

                      * Begin  End   Information
                      *   0     1    Two bytes of zeroes (Clears forward link)
                      *  16    26    Volume name in ASCII
                      *  27    28    Volume number in binary
                      *  29    30    Address of first data sector (Track-Sector)
                      *  31    32    Address of last data sector (Track-Sector)
                      *  33    34    Total number of data sectors in binary
                      *  35    37    Current date (Month-Day-Year) in binary
                      *  38    38    Highest track number on disk in binary
                      *  39    39    Highest sector number on a track in binary
 E7C2 8EDE80          FMT3A LDX #BUFFER set up SIR
 E7C5 4F               CLRA
 E7C6 C603             LDB #3
 E7C8 BDF448           JSR READ
 E7CB 8EDE80           LDX #BUFFER
                      *
 E7CE 6F84             CLR ,X Two bytes of zeroes (Clears forward link)
 E7D0 6F01             CLR 1,X
                      *
 E7D2 CC462D           LDD #$462D Volume name in ASCII
 E7D5 ED8810           STD 16,X
 E7D8 CC5241           LDD #$5241
 E7DB ED8812           STD 18,X
 E7DE CC4D44           LDD #$4D44
 E7E1 ED8814           STD 20,X
 E7E4 CC534B           LDD #$534B
 E7E7 ED8816           STD 22,X
                      *
 E7EA CC0001           LDD #1 Volume number in binary 
 E7ED ED881B           STD 27,X
                      *
 E7F0 CC0101           LDD #$0101 Address of first data sector (Track-Sector)
 E7F3 ED881D           STD 29,X
                      *
 E7F6 CC270A           LDD #$270A
 E7F9 ED881F           STD 31,X Address of last data sector (Track-Sector)
 E7FC ED8826           STD 38,X Highest track/sector number in binary
                      *
 E7FF CC0186           LDD #$0186 Total number of data sectors in binary
 E802 ED8821           STD 33,X
                      *
 E805 C608             LDB #MONTH set current date from RTC
 E807 BDF5C9           JSR GETRTC
 E80A A78823           STA 35,X
 E80D C607             LDB #DAY
 E80F BDF5C9           JSR GETRTC
 E812 A78824           STA 36,X
 E815 C609             LDB #YEAR
 E817 BDF5C9           JSR GETRTC     display year
 E81A A78825           STA 37,X
                      *
 E81D 4F               CLRA 
 E81E C603             LDB #3
 E820 BDF44C           JSR WRITE
                      *
 E823 7EF0EF           JMP CONTRL all done...
                      *
                      * Random read test on drive.
 E826 0D52616E646F6D  TDMES FCC $0D,'Random sector read on drive ',4
 E82D 20736563746F72
 E834 2072656164206F


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 47
Ver 6.2    D.A.Rumball    2023-05-20

 E83B 6E206472697665
 E842 2004
 E844 48697420616E79  TDMES1 FCC 'Hit any key to stop.',4
 E84B 206B657920746F
 E852 2073746F702E04
 E859 61742074726163  ERR2 FCC 'at track/sector ',4
 E860 6B2F736563746F
 E867 722004
 E86A 8EE826          TD LDX #TDMES
 E86D BDF4C7           JSR PDATA1
 E870 BDF52C           JSR INHEX
 E873 B7DF8E           STA DRIVE
 E876 8EE844           LDX #TDMES1
 E879 BDF4CE           JSR PSTRNG
 E87C 8EDF8B           LDX #(DRIVE-3)
 E87F BDF454           JSR RST
 E882 BDF55D          TDLOOP JSR RANDOM
 E885 840F             ANDA #$0F
 E887 8B01             ADDA #1
 E889 810A             CMPA #10
 E88B 2EF5             BGT TDLOOP
 E88D B7DF90           STA SECTOR
 E890 BDF55D          TDLP2 JSR RANDOM
 E893 843F             ANDA #$3F
 E895 8127             CMPA #39
 E897 2EF7             BGT TDLP2
 E899 B7DF8F           STA TRACK
 E89C F6DF90           LDB SECTOR
 E89F 8EDE80           LDX #BUFFER
 E8A2 BDF448           JSR READ
 E8A5 260E             BNE TDLP9
 E8A7 BDF161           JSR STATUS
 E8AA 27D6             BEQ TDLOOP
 E8AC 8EDF8B           LDX #(DRIVE-3)
 E8AF BDF454           JSR RST
 E8B2 7EF0EF           JMP CONTRL
 E8B5 8EE5FD          TDLP9 LDX #ERR1
 E8B8 BDF4C7           JSR PDATA1
 E8BB F7DF91           STB TEMP
 E8BE 8EDF91           LDX #TEMP
 E8C1 BDF556           JSR OUT2HS
 E8C4 8EE859           LDX #ERR2
 E8C7 BDF4C7           JSR PDATA1
 E8CA 8EDF8F           LDX #TRACK
 E8CD BDF554           JSR OUT4HS
>E8D0 7EE882           JMP TDLOOP
                      *
                      * Test drive stepping.
 E8D3 0D546573742073  TSMESS FCC $0D,'Test stepping on drive ',4
 E8DA 74657070696E67
 E8E1 206F6E20647269
 E8E8 76652004
 E8EC 8EE8D3          TS LDX #TSMESS
 E8EF BDF4C7           JSR PDATA1
 E8F2 BDF52C           JSR INHEX
 E8F5 B7DF8E           STA DRIVE
 E8F8 8EDF8B           LDX #(DRIVE-3)
 E8FB BDF45D           JSR DRV
 E8FE 8628            TSLOOP LDA #40
 E900 C601             LDB #1
 E902 BDF4B4           JSR SEEK


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 48
Ver 6.2    D.A.Rumball    2023-05-20

 E905 BDF454           JSR RST
 E908 BDF161           JSR STATUS
 E90B 102607E0         LBNE CONTRL
 E90F 20ED             BRA TSLOOP
                      *
                      *
                      ********************************************
                      * Extra system dependant commands go here. *
                      ********************************************
                      *
 E911 0D446973706C61  DCM FCC $0D,'Display RTC contents.',4
 E918 79205254432063
 E91F 6F6E74656E7473
 E926 2E04
 E928 072020204E6F20  NORTC FCC $07,'   No RTC found!'
 E92F 52544320666F75
 E936 6E6421
 E939 04               FCB 4
 E93A 8EE911          DCLK LDX #DCM
 E93D BDF4C7           JSR PDATA1
 E940 7DDFB5           TST RTCFAIL
 E943 2609             BNE DC_OK
 E945 8EE928           LDX #NORTC 
 E948 BDF4C7           JSR PDATA1
 E94B 7EF0EF           JMP CONTRL
 E94E BDF4BB          DC_OK JSR PCRLF
                      *
 E951 C604             LDB #HOURS
 E953 BDF5C9           JSR GETRTC     display hours
 E956 BDF5A4           JSR BIN2BCD
 E959 BDE9F9           JSR PRTA
 E95C 863A             LDA #':
 E95E BDF19E           JSR OUTCH
 E961 C602             LDB #MINS
 E963 BDF5C9           JSR GETRTC     display mins
 E966 BDF5A4           JSR BIN2BCD
 E969 BDE9F9           JSR PRTA
 E96C 863A             LDA #':
 E96E BDF19E           JSR OUTCH
 E971 C600             LDB #SECS
 E973 BDF5C9           JSR GETRTC     display secs
 E976 BDF5A4           JSR BIN2BCD
 E979 BDE9F9           JSR PRTA
 E97C 8620             LDA #$20
                      *
 E97E BDF19E           JSR OUTCH      space betwen time and date
 E981 8620             LDA #$20
 E983 BDF19E           JSR OUTCH
                      *
 E986 C607             LDB #DAY
 E988 BDF5C9           JSR GETRTC     display day
 E98B BDF5A4           JSR BIN2BCD
 E98E 8D69             BSR PRTA
 E990 862F             LDA #'/
 E992 BDF19E           JSR OUTCH
 E995 C608             LDB #MONTH
 E997 BDF5C9           JSR GETRTC     display month
 E99A BDF5A4           JSR BIN2BCD
 E99D 8D5A             BSR PRTA
 E99F 862F             LDA #'/
 E9A1 BDF19E           JSR OUTCH


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 49
Ver 6.2    D.A.Rumball    2023-05-20

 E9A4 C609             LDB #YEAR
 E9A6 BDF5C9           JSR GETRTC     display year
 E9A9 BDF5A4           JSR BIN2BCD
 E9AC 8D4B             BSR PRTA
 E9AE BDF4BB           JSR PCRLF
                      *
 E9B1 C60A             LDB #$0A
 E9B3 8E0004           LDX #4         reserved by system
 E9B6 8D28             BSR PAXT
 E9B8 C60E             LDB #$0E       options 
 E9BA 8E0001           LDX #1         
 E9BD 8D21             BSR PAXT
 E9BF 8E0001           LDX #1         RTC valid byte
 E9C2 8D1C             BSR PAXT
 E9C4 8E0004           LDX #4         physical/logical drive assignments
 E9C7 8D17             BSR PAXT
 E9C9 8E000B           LDX #11        FLEX TTYSET parameters
 E9CC 8D12             BSR PAXT
 E9CE 8E0002           LDX #2         FLEX ASN parameters
 E9D1 8D0D             BSR PAXT
 E9D3 8E000F           LDX #15        reserved by system
 E9D6 8D08             BSR PAXT
 E9D8 8E0010           LDX #16        general user bytes
 E9DB 8D03             BSR PAXT
 E9DD 7EF0EF           JMP CONTRL
                      *
 E9E0 BDF5C9          PAXT JSR GETRTC
 E9E3 5C               INCB
 E9E4 B7DF91           STA TEMP
 E9E7 3410             PSHS X
 E9E9 8EDF91           LDX #TEMP
 E9EC BDF556           JSR OUT2HS
 E9EF 3510             PULS X
 E9F1 301F             LEAX -1,X
 E9F3 26EB             BNE PAXT
 E9F5 BDF4BB           JSR PCRLF
 E9F8 39               RTS
                      * print the A reg (no space)
 E9F9 3416            PRTA PSHS D,X
 E9FB B7DF91            STA  TEMP
 E9FE 8EDF91            LDX  #TEMP
 EA01 BDF54C            JSR  OUT2H
 EA04 3596              PULS  D,X,PC
                      *
                      *
 EA06 0D525443206578  MCS FCC $0D,'RTC examine and alter from ',4
 EA0D 616D696E652061
 EA14 6E6420616C7465
 EA1B 722066726F6D20
 EA22 04
 EA23 8EEA06          MC LDX #MCS
 EA26 BDF4C7           JSR PDATA1
 EA29 BDF507           JSR BYTE
 EA2C 1F89             TFR A,B
 EA2E C43F            MC1 ANDB #$3F
 EA30 BDF4BB           JSR PCRLF
 EA33 F7DF91           STB TEMP
 EA36 8EDF91           LDX #TEMP
 EA39 BDF556           JSR OUT2HS
 EA3C BDF5C9           JSR GETRTC
 EA3F B7DF91           STA TEMP


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 50
Ver 6.2    D.A.Rumball    2023-05-20

 EA42 8EDF91           LDX #TEMP
 EA45 BDF54C           JSR OUT2H
 EA48 BDF19C           JSR INCH
 EA4B 8120             CMPA #$20
 EA4D 2609             BNE MC2
 EA4F BDF507           JSR BYTE
 EA52 BDF5E7           JSR PUTRTC
 EA55 5C               INCB
 EA56 20D6             BRA MC1
 EA58 810D            MC2 CMPA #$0D
 EA5A 2603             BNE MC3
 EA5C 5C               INCB
 EA5D 20CF             BRA MC1
 EA5F 812D            MC3 CMPA #'-
 EA61 1026068A         LBNE CONTRL
 EA65 5A               DECB
 EA66 20C6             BRA MC1
                      *
                      * Set breakpoint at XXXX.
 EA68 0D536574206272  BPS FCC $0D,'Set breakpoint at ',4
 EA6F 65616B706F696E
 EA76 742061742004
 EA7C 8EEA68          BP        LDX     #BPS
 EA7F BDF4C7                    JSR     PDATA1
 EA82 BDF4FC                    JSR     BADDR
 EA85 A600                      LDA     0,X      save the instruction byte under the breakpoint
 EA87 B7DFFD                    STA     BRKPNT
 EA8A 863F                      LDA     #$3F     SWI instruction
 EA8C A700                      STA     0,X
 EA8E 7EF0EF                    JMP     CONTRL
                      *
                      *
 EA91 0D52656D6F7465  rms     fcc $0D,'Remote mount PROMdisk image (MB2K2PD.DSK) to drive 0',4
 EA98 206D6F756E7420
 EA9F 50524F4D646973
 EAA6 6B20696D616765
 EAAD 20284D42324B32
 EAB4 50442E44534B29
 EABB 20746F20647269
 EAC2 7665203004
 EAC7 43616E6E6F7420  synstr  fcc 'Cannot sync serial transfer!',4
 EACE 73796E63207365
 EAD5 7269616C207472
 EADC 616E7366657221
 EAE3 04
 EAE4 004D42324B3250  filenm  fcc 0,'MB2K2PD',$0D drive zero and filename(.dsk)
 EAEB 440D
 EAED 436F6D6D756E69  nwrkst  fcc 'Communication is not working!',4
 EAF4 636174696F6E20
 EAFB 6973206E6F7420
 EB02 776F726B696E67
 EB09 2104
 EB0B 436F756C64206E  badfst  fcc 'Could not open file',4
 EB12 6F74206F70656E
 EB19 2066696C6504
 EB1F 46696C65206F70  readst  fcc 'File open in read-only mode',4
 EB26 656E20696E2072
 EB2D 6561642D6F6E6C
 EB34 79206D6F646504
 EB3B 46696C65206F70  writest fcc 'File opened with full access (read/write)',4
 EB42 656E6564207769


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 51
Ver 6.2    D.A.Rumball    2023-05-20

 EB49 74682066756C6C
 EB50 20616363657373
 EB57 2028726561642F
 EB5E 77726974652904
 EB65 53657269616C20  scnest  fcc 'Serial connection established',4
 EB6C 636F6E6E656374
 EB73 696F6E20657374
 EB7A 61626C69736865
 EB81 6404
                      *
 EB83 8EEA91          RM      ldx     #rms
 EB86 BDF4C7                  jsr     PDATA1
                      *
                      *   Check if host is ready with 'Q', if not, then resync and report on connection
                      *
 EB89 8651            start   lda     #'Q             quick check that communication is working
 EB8B BDF424                  jsr     SCHAR
 EB8E 240B                    bcc     timeout         time out, communication not working
                      *
 EB90 BDF405                  jsr     RCHAR           get response
 EB93 2406                    bcc     timeout         time out, communication not working
 EB95 8106                    cmpa    #ACK            got an ack?
 EB97 2602                    bne     timeout          communication not working
 EB99 2044                    bra     check           carry on with MOUNT
                      *
                      * sync and report on connection
 EB9B 8605            timeout lda     #5              number of tries
 EB9D B7DFFF                  sta     TRIES
 EBA0 8655                    lda     #$55            1st sync char
 EBA2 B7DF91          sync04  sta     TEMP
                      *
 EBA5 BDF424          sync08  jsr     SCHAR           send char
 EBA8 2420                    bcc     sync16          time out, report error
                      *
 EBAA BDF405                  jsr     RCHAR           get answer from receiver
 EBAD 241B                    bcc     sync16
 EBAF B1DF91                  cmpa    TEMP            same as sent?
 EBB2 270E                    beq     sync12          yes
                      *
 EBB4 B6DF91                  lda     TEMP
 EBB7 8155                    cmpa    #$55            1st sync char?
 EBB9 260F                    bne     sync16          nope, something is wrong
                      *
 EBBB 7ADFFF                  dec     TRIES           decrease try count
 EBBE 26E5                    bne     sync08          try again if not 0
 EBC0 2008                    bra     sync16          report sync error
                      *
 EBC2 81AA            sync12  cmpa    #$aa            2nd sync char?
 EBC4 270D                    beq     sync20          yes, continue
                      *
 EBC6 86AA                    lda     #$aa            send 2nd sync char
 EBC8 20D8                    bra     sync04
                      *
 EBCA 8EEAC7          sync16  ldx     #synstr         "Cannot sync..."
 EBCD BDF4CE          sync17  jsr     PSTRNG
 EBD0 7EF0EF                  jmp     CONTRL
                      *
 EBD3 8EEB65          sync20  ldx     #scnest         "Serial connection established"
 EBD6 BDF4CE                  jsr     PSTRNG
 EBD9 8E01F4                  ldx     #500
 EBDC BDF4EB                  jsr     DELAY


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 52
Ver 6.2    D.A.Rumball    2023-05-20

                      *
 EBDF 8EDF9D          check   ldx     #DDSTAB         force map to drive 0
 EBE2 8603                    lda     #3              FlexNet drive type
 EBE4 A700                    staa    0,x
                      *
 EBE6 866D            main    lda     #'m             send m(ount) command to remote host
 EBE8 BDF424                  jsr     SCHAR
 EBEB 10240038                lbcc    nwrkng          time out, communication not working
                      *
 EBEF 8EEAE4                  ldx     #filenm         send PROMdisk filename ('MB2K2PD')
 EBF2 A680            main1   ldaa    0,x+
 EBF4 BDF424                  jsr     SCHAR           send one character to remote host
 EBF7 1024002C                lbcc    nwrkng          time out, communication not working
 EBFB 810D                    cmpa    #$0D            last character in line?
 EBFD 26F3                    bne     main1
                      *
 EBFF BDF405          main2   jsr     RCHAR           get response
 EC02 10240021                lbcc    nwrkng          time out, communication not working
 EC06 8106                    cmpa    #ACK            got an ack?
 EC08 10260020                lbne    badfnm          no, report bad file name
                      *
                      * Check for "R" or "W" after the ack
 EC0C BDF405                  jsr     RCHAR           get character
 EC0F 10240014                lbcc    nwrkng          time out, not working
 EC13 8152                    cmpa    #'R             Read only?
 EC15 2706                    beq     read
 EC17 8157                    cmpa    #'W             Write only?
 EC19 2707                    beq     write
 EC1B 200F                    bra     badfnm          otherwise, report error
                      *
 EC1D 8EEB1F          read    ldx     #readst         Read-only message
 EC20 200D                    bra     finish
 EC22 8EEB3B          write   ldx     #writest        Full access message
 EC25 2008                    bra     finish
 EC27 8EEAED          nwrkng  ldx     #nwrkst         communication is not working
 EC2A 2003                    bra     finish
 EC2C 8EEB0B          badfnm  ldx     #badfst         bad file name
                      *
 EC2F BDF4CE          finish  jsr     PSTRNG          
 EC32 7EF0EF                  jmp     CONTRL
                      * 
                                                                                              
                      *
                      * copy of vector table for OS9
                       ORG (PROM+$1FE0)
 FFE0 C1B1                      FDB      $C1B1               OS9 TICK routine in kernel (handle process queue located in os9p1) FIXME as this needs to be hard coded!
 FFE2 F148                      FDB      OSWI3               Software interrupt three.
 FFE4 F14C                      FDB      OSWI2               Software interrupt two.
 FFE6 F150                      FDB      OFIRQ               Fast interrupt request.
 FFE8 F154                      FDB      OIRQ                Interrupt request.
 FFEA F158                      FDB      OSWI                Software interrupt.
 FFEC F15C                      FDB      ONMI                Non-maskable interrupt.
 FFEE F0EF                      FDB      CONTRL              OS9 warm start? FIXME!
                      *
                      * Hardware interrupt vector table
                       ORG (PROM+$1FF0)
 FFF0 F0A4                      FDB      RESET               Not implemented in 6809.
 FFF2 F144                      FDB      FSWI3               Software interrupt three.
 FFF4 F140                      FDB      FSWI2               Software interrupt two.
 FFF6 F13C                      FDB      FFIRQ               Fast interrupt request.
 FFF8 F138                      FDB      FIRQ                Interrupt request.


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 53
Ver 6.2    D.A.Rumball    2023-05-20

 FFFA E2E7                      FDB      FSWI                Software interrupt.
 FFFC F134                      FDB      FNMI                Non-maskable interrupt.
 FFFE F0A4                      FDB      RESET               Cold start.
                      *
                      *
                       END


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 54
Ver 6.2    D.A.Rumball    2023-05-20

SYMBOL TABLE
    ACIAC1 00 FF09    ACIAC2 00 FF05    ACIAD1 00 FF08    ACIAD2 00 FF04
       ACK 00 0006       ARC 02 F980     ATTRI 02 DFE1     BADDR 02 F4FC
     BAUD1 00 FF0C     BAUD2 00 FF0D   BCD2BIN 02 F58B      BCOL 02 DFDF
      BEEP 02 F5FC        BF 02 FAD0    BFMESS 02 FA8C     BFRR2 02 FAB0
   BIN2BCD 02 F5A4    BITCON 00 FF1F       BLP 02 F5A7      BLP1 02 F5AE
        BO 02 FC3D     BOEND 02 FBDB    BOMESS 02 FC1D        BP 02 EA7C
       BPS 02 EA68    BRKPNT 02 DFFD      BROW 02 DFE0    BUFFER 02 DE80
      BUSY 00 0001      BYTE 02 F507      CCOL 02 DFDD     CFLAG 02 DFFA
   CHARTAB 02 DFE3       CHK 02 FB00      CHK1 02 FB06    CHKRDY 02 F490
    CHKSUM 02 DFFB    CHKVEC 02 DFAB    CIRCLE 02 F92F    CLEARG 02 F822
    CLEART 02 FA19    CLEARX 02 F844     CLINK 02 FA48       COL 02 DFDA
    COMREG 00 FF10    COMTAB 02 E159    CONPRS 02 E24B     CONST 02 DFD8
      CONT 02 E144    CONTAB 02 FBE7    CONTRL 02 F0EF        CP 02 E262
     CRLFS 02 F4B8      CROW 02 DFDE    CSPACE 02 DFE2       CTE 02 FA46
     CTYPE 02 DFEA    CURDRV 02 DFB6    CUREND 02 FA86      CURS 02 FA7F
    CURSOR 02 DFE5     CZOOM 02 DFE9        D0 02 DFD0        D1 02 DFD4
        D2 02 DFD2    DATREG 00 FF13       DAY 00 0007     DAYOW 00 0006
        DC 02 DFCE      DCLK 02 E93A       DCM 02 E911     DC_OK 02 E94E
    DDSTAB 02 DF9D    DDUMMY 02 F24A     DELAY 02 F4EB    DELAY1 02 F4ED
    DELAY2 02 F4F1    DELCON 00 0190       DEN 02 DFF4      DEN1 02 DFF5
        DF 02 E723     DINIT 02 F498    DINIT1 02 F499    DINIT2 02 F4A7
    DISFOS 02 E6D8    DISRES 02 E498    DISTAB 02 FBFF        DM 02 DFD6
        DR 02 E4D9       DR1 02 E4DF     DRIVE 02 DF8E    DRIVE1 02 F475
    DRIVE2 02 F483       DRQ 00 0002       DRV 02 F45D    DRVVEC 02 DFA9
        DU 02 E361     DUMMY 02 F160    ECHECK 02 F28F    ECOMRG 00 FF30
       ED1 02 F257    EDATRG 00 FF33    EDUMMY 02 F24F     ERDLP 02 F26A
     EREAD 02 F25D      ERR1 02 E5FD      ERR2 02 E859    ESCFLG 02 DFEB
    ESECRG 00 FF32    ETRKRG 00 FF31     EWDLP 02 F282    EWRITE 02 F275
       F1A 02 E12A    FAILMS 02 E065      FAST 02 F25B    FCHECK 02 F315
    FCOMRG 00 FF58    FDATRG 00 FF5B     FFIRQ 02 F13C     FIGSF 02 F688
    FIGSF1 02 F698     FIGSG 02 F6AD    FIGSG1 02 F6BF      FILL 02 F803
    FILMES 02 E26D       FIN 02 F6A6      FING 02 F6CF      FIRQ 02 F138
     FIRQV 02 DF86     FLASH 02 DFF8    FLASH1 02 F178    FLASH2 02 F173
       FLP 02 FBD1        FM 02 E295       FM1 02 E2B4       FMT 02 E744
      FMT1 02 E74C     FMT1A 02 E75D      FMT2 02 E782      FMT3 02 E794
     FMT3A 02 E7C2      FNMI 02 F134     FREAD 02 F2C5     FROMS 02 E67F
    FSECRG 00 FF5A      FSWI 02 E2E7     FSWI2 02 F140     FSWI3 02 F144
    FTRKRG 00 FF59    FWRITE 02 F2ED      GCOM 02 F620     GCOM1 02 F625
     GCOM2 02 F62E      GDC3 02 F881    GDCCOM 00 FF15   GDCINIT 02 F879
    GDCOUT 02 FA73    GDCPRM 00 FF14     GETCH 02 FB76    GETCH2 02 FB7C
    GETCH4 02 FB8C    GETCRG 02 F758    GETCRT 02 F9DC    GETRTC 02 F5C9
    GETTIM 02 F5BC     GFIGS 02 DFCD     GMODE 02 DFCB    GPARAM 02 DFC3
      GPRM 02 F632     GPRM1 02 F634     GPRMI 02 F641     GRAPH 02 F7BA
    GTCRG1 02 F76E    GTCRG2 02 F777    GTCRG3 02 F791    GTCRG4 02 F799
       GTL 02 F5C0     GZOOM 02 DFCC      HAD2 02 E39F      HAD3 02 E395
      HAD4 02 E3A9      HAD5 02 E3AB       HD1 02 E37E       HD2 02 E386
       HD3 02 E3B3       HD4 02 E36D    HDMES1 02 E318       HDR 02 E000
    HEXDUS 02 E2F4     HOURS 00 0004      INCH 02 F19C     INCH1 02 F183
    INCH1A 02 F185    INCH1B 02 F191     INHEX 02 F52C    INHEX1 02 F544
    INIVEC 02 DFAF     INKEY 02 F1BD     INPRI 02 F1C9     INTAB 02 F1AB
     INTER 02 F1C3        IO 00 FF00     IPORT 02 DF8C      IRQV 02 DF84
        JF 02 E1F4     JFMES 02 E1DA        JU 02 E1CF     JUMES 02 E1BA
    KEYREG 00 FF00        L1 02 F0AF       LD1 02 FB96       LD2 02 FBA6
     LDONE 02 FB8F      LINE 02 F8D6      LOAD 02 FB36     LOAD1 02 FB40
     LOAD2 02 FB50     LOAD3 02 FB64        LR 02 FB71    MAPOUT 02 F616
      MASK 02 F64C    MAXCOL 02 DFDB    MAXROW 02 DFDC        MC 02 EA23
       MC1 02 EA2E       MC2 02 EA58       MC3 02 EA5F       MCS 02 EA06
        ME 02 E45F       ME1 02 E468       ME2 02 E47C       MED 02 E482
    MEMEXS 02 E423     MINIT 02 E0C7    MINITR 02 F0E9      MINS 00 0002
      MODE 02 F7D5     MODE1 02 F7E8     MONTH 00 0008       NAK 00 0015


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 55
Ver 6.2    D.A.Rumball    2023-05-20

    NCHECK 02 F3EC   NCK_END 02 F403   NCK_ERR 02 F3FF      NEXT 02 F112
      NMIV 02 DF82       NO4 02 FB30      NOPE 02 F119     NOPE1 02 FB19
     NOPE2 02 FB23     NOPE3 02 FB2D     NORAM 02 E444     NORTC 02 E928
    NOTHEX 02 F545    NOTTHS 02 E03B   NRD_DNR 02 F375   NRD_END 02 F382
   NRD_ERR 02 F379     NREAD 02 F318    NREAD1 02 F340    NREAD2 02 F352
      NSEC 02 FAEF   NVERIFY 02 F3E7    NWRITE 02 F387   NWRITE1 02 F3AF
   NWRITE2 02 F3C1   NWR_END 02 F3E2   NWR_ERR 02 F3E0       OFF 02 F7A2
    OFFSET 02 DFE7     OFIRQ 02 F150      OIRQ 02 F154        ON 02 F7AE
      ONMI 02 F15C     OPORT 02 DF8D      OSWI 02 F158     OSWI2 02 F14C
     OSWI3 02 F148     OUT2H 02 F54C    OUT2HA 02 F54E    OUT2HS 02 F556
    OUT4HS 02 F554     OUTCH 02 F19E    OUTGDC 02 F1CF     OUTHL 02 F519
     OUTHR 02 F51D    OUTPRI 02 F1DD      OUTS 02 F558    OUTTAB 02 F1B1
    OUTTER 02 F1D2         P 02 F4C4     PARSE 02 F10F     PART1 02 DFBB
     PART2 02 DFBF      PAXT 02 E9E0     PCRLF 02 F4BB    PDATA1 02 F4C7
    PDWPRT 02 DFFE        PE 02 E40A    PEKMES 02 E3F4    PEMES1 02 E405
     PIACA 00 FF01     PIACB 00 FF03        PO 02 E3DB     POINT 02 F8CA
    POKMES 02 E3CA     PORTA 00 FF1C     PORTB 00 FF1D     PORTC 00 FF1E
    PRINTA 02 F4D3    PRINTX 02 F4DF      PROM 00 E000    PROMPT 02 E036
      PRTA 02 E9F9      PRTC 02 F5E9    PSTRNG 02 F4CE       PTL 02 F5DE
    PUTRTC 02 F5E7    PUTTIM 02 F5DA     QUICK 02 F494    QUIVEC 02 DFAD
       RAM 00 DE00    RANDOM 02 F55D     RCHAR 02 F405    RCHAR1 02 F40A
    RCHAR2 02 F40E    RCHAR3 02 F41F    RCHECK 02 F2C2    RCOMRG 00 FF20
    RDATRG 00 FF23      READ 02 F448    REASES 02 E5CB    REAVEC 02 DFA1
     RECMD 00 0084      RECT 02 F902    REMASK 00 001C     RESET 02 F0A4
    RFRDLP 02 F2DA        RM 02 EB83      RNDM 02 DF98       ROW 02 DFD9
        RP 02 E2D3       RP1 02 E2E2       RPT 02 F561     RRDLP 02 F29F
     RREAD 02 F292        RS 02 E612     RSCMD 00 0000    RSECRG 00 FF22
    RSMASK 00 0058       RST 02 F454      RST1 02 F459    RSTRNG 02 E4B0
    RSTVEC 02 DFA7    RTCADD 00 FF18    RTCDAT 00 FF19   RTCFAIL 02 DFB5
   RTCLOOP 02 E0F5    RTCLP1 02 E101    RTCTAB 02 E091    RTRKRG 00 FF21
    RUNPRS 02 E2C0    RWRITE 02 F2AA     SCHAR 02 F424    SCHAR1 02 F42B
    SCHAR2 02 F42F    SCHAR3 02 F441     SCRAT 00 DF80     SECMD 00 0010
    SECREG 00 FF12      SECS 00 0000     SECSS 02 E5EF    SECTOR 02 DF90
      SEEK 02 F4B4    SEEVEC 02 DFB3    SEMASK 00 0010    SETCRG 02 F738
    SETCRT 02 F9BF    SETPAR 02 F6D6    SETPAT 02 F675    SETPEN 02 F65E
    SETPR1 02 F71C    SETPT1 02 F67F        SI 02 E214     SIMES 02 E200
      SLOW 02 F25C        SO 02 E23A     SOMES 02 E225    SSTACK 00 DE6F
     STACK 02 DF80    STAKEY 02 F1E8    STAPRI 02 F1F4    STATAB 02 F1B7
    STATER 02 F1EE    STATUS 02 F161      STEP 02 DFF6     STEP0 02 DFF7
       SUD 02 E10B     SUGDC 02 E122    SUGDC1 02 F88C     SURES 02 E713
     SWI2V 02 DF88     SWI3V 02 DF8A       SY1 02 F728       SY2 02 F72F
      SYNC 02 F726    SYSREG 00 FF02     TABLE 02 F8FA    TABSRT 02 F1FA
        TD 02 E86A    TDLOOP 02 E882     TDLP2 02 E890     TDLP9 02 E8B5
     TDMES 02 E826    TDMES1 02 E844      TEMP 02 DF91    TESMES 02 E508
      TEXT 02 F9FB     TEXT1 02 FAC8       TL1 02 DFF0       TL2 02 DFF2
        TM 02 E550       TM1 02 E579       TM2 02 E599       TM3 02 E596
       TM4 02 E57F       TM5 02 E56E      TMS1 02 E51B      TMS2 02 E531
      TMS3 02 E53D       TOS 02 E5F8     TOUP1 02 F58A   TOUPPER 02 F580
     TRACK 02 DF8F     TRACS 02 E5E7     TRIES 02 DFFF    TRKREG 00 FF11
        TS 02 E8EC       TS1 02 DFEC       TS2 02 DFEE    TSLOOP 02 E8FE
    TSMESS 02 E8D3       TTO 02 DF96    TXTPAR 02 FA49    TXTPR1 02 FA55
    TXTPR2 02 FA6D        U1 02 F0BB       U1L 02 F0CA     UNEXP 02 F129
    UNMESS 02 E04F    VALUES 02 E28E    VEMASK 00 0018    VERIFY 02 F450
    VERVEC 02 DFA5     WABT1 02 E764      WARM 02 F4B0     WARMS 02 DF9C
    WARVEC 02 DFB1    WFRDLP 02 F302      WHAT 02 F121     WRCMD 00 00A4
     WRDLP 02 F2B7    WRIMES 02 E664     WRITE 02 F44C    WRIVEC 02 DFA3
    WRMASK 00 005C        WS 02 E686    XCOORD 02 DFB7     XTEMP 02 DF92
    YCOORD 02 DFB9      YEAR 00 0009     YTEMP 02 DF94      ZOOM 02 F7EC
     ZOOM1 02 F7FF    badfnm 02 EC2C    badfst 02 EB0B      bolp 02 FC62
     check 02 EBDF    filenm 02 EAE4    finish 02 EC2F    irqhdl 02 FA88
      main 02 EBE6     main1 02 EBF2     main2 02 EBFF    nwrkng 02 EC27


Mon09                            2023-05-22 A09 6809 Assembler V1.40 Page 56
Ver 6.2    D.A.Rumball    2023-05-20

    nwrkst 02 EAED       o1l 02 FC4A      read 02 EC1D    readst 02 EB1F
       rms 02 EA91    scnest 02 EB65     start 02 EB89    sync04 02 EBA2
    sync08 02 EBA5    sync12 02 EBC2    sync16 02 EBCA    sync17 02 EBCD
    sync20 02 EBD3    synstr 02 EAC7   timeout 02 EB9B     write 02 EC22
   writest 02 EB3B
501 SYMBOLS

0 error(s), 0 warning(s)

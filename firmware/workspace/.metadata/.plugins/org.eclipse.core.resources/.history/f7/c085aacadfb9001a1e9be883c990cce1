 nam Clock Module* Copyright 1980 by Microware Systems Corp.,** This source code is the proprietary confidential property of* Microware Systems Corporation, and is provided to licensee* solely  for documentation and educational purposes. Reproduction,* publication, or distribution in any form to any party other than * the licensee is strictly prohibited!* use defsfileCLOCK set $FFE0 opt c ttl Definitions page*******  Clock Module** Initializes MB2K2 TMR for 20ms Intervals and handle RTC* Sets Irq Polling Routine********  Module Header*Type set SYSTM+OBJCTRevs set REENT+1ClkMod mod ClkEnd,ClkNam,Type,Revs,ClkEnt,CPORTClkNam fcs /Clock/ fcb 3 Edition number********************** Edition history** Ed.  1 - prehistoric times                           12/08/82 WGP** Ed.  2 - file set up for LI V1.2                     12/08/82 WGP** Ed.  3 - conditionals added for 6840 time fix of     12/15/82 WGP*          IRQ mask problem*          set up to use defsfile in assembly directory*CLKPRT equ M$Mem Stack has clock port address** Clock Data Definitions*TIMSVC fcb F$TIME fdb TIME-*-2 fcb $80**  Days In Months Table*MONTHS fcb 0 Uninitialized month fcb 31 January fcb 28 February fcb 31 March fcb 30 April fcb 31 May fcb 30 June fcb 31 July fcb 31 August fcb 30 September fcb 31 October fcb 30 November fcb 31 December*SecMilli equ 0SecTenth equ 1Second equ 2Minute equ 3Hour equ 4DayWeek equ 5DayMonth equ 6Month equ 7Status equ 16Control equ 17CountRst equ 18LatchRst equ 19RollOver equ 20Go equ 21 page*******  Clock Interrupt Service Routine*NOTCLK jmp [D.SvcIRQ] Go to interrupt serviceCLKSRV ldx CLKPRT,PCR Get clock address lda $FF40 clear TMR flag*TICK clra SET Direct page tfr A,DP** Update Current Time* dec D.Tick Count tick bne TICK50 Branch if not end of second ldd D.MIN Get minute & second incb COUNT Second cmpb #60 End of minute? bcs TICK35 Branch if not inca COUNT Minute cmpa #60 End of hour? bcs TICK30 Branch if not ldd D.DAY Get day & hour incb COUNT Hour cmpb #24 End of day? bcs TICK25 Branch if not inca COUNT Day leax MONTHS,PCR Get days/month table ldb D.Month Get month cmpb #2 Is it february? bne TICK10 Branch if not ldb D.YEAR Get year beq TICK10 Branch if even hundred andb #3 Is it leap year? bne TICK10 Branch if not deca ADD Feb 29TICK10 ldb D.Month Get month cmpa B,X End of month? bls TICK20 Branch if not ldd D.YEAR Get year & month incb COUNT Month cmpb #13 End of year? bcs TICK15 Branch if not inca COUNT Year ldb #1 New monthTICK15 std D.YEAR Update year & month lda #1 New dayTICK20 clrb NEW HourTICK25 std D.DAY Update day & hour clra NEW MinuteTICK30 clrb NEW SecondTICK35 std D.MIN Update minute & second lda D.TSEC Get ticks/second sta D.TickTICK50  sta $FF40 restart TMR jmp [CLOCK] Go to system clock routine ($FEE0)********  Clock Initialization Entry*ClkEnt pshs DP save direct page clra clear Dp tfr A,DP pshs CC save interrupt masks* lda #20 Set ticks/second sta D.TSEC sta D.Tick lda #1 Set ticks / time-slice sta D.TSlice sta D.Slice orcc #IRQMask+FIRQMask Set intrpt masks* leax CLKSRV,PCR Get service routine stx D.IRQ Set interrupt vector lda $FF40 clear TMR flag** leas -5,S get scratch* ldx #D.Month Get month ptr* bsr CNVBB Convert binary to bcd* stb 0,S save month* bsr CNVBB Convert* stb 1,S save day* bsr CNVBB Convert* stb 2,S save hour* bsr CNVBB Convert* stb 3,S save minute* bsr CNVBB Convert* stb 4,S save second* ldx CLKPRT,PCR get clock address* ldd #$FF02* sta LatchRst,X Reset latches* lda Status,X Clear any interrupt* stb Control,X enable 100 millisec line* lda 0,S retrieve month* beq SkipSet* sta Month,X set clock chip* lda 1,S retrieve day* beq SkipSet* sta DayMonth,X* lda 2,S retrieve hour* sta Hour,X Set clock chip* ldd 3,S retrieve minute & second* sta Minute,X set clock chip* clr Go,X reset seconds* stb Second,X*SkipSet leas 5,S return scratch* sta $FF40 start timer puls CC retrieve masks leay TIMSVC,PCR OS9 F$SSVC Set time sevice routine puls DP,PC*CNVBB lda ,X+ Get binary byte ldb #$FA Init bcd byteCNVB10 addb #$10 Count ten suba #10 Is there a ten? bcc CNVB10 Branch if soCNVB20 decb Count Unit inca Is there a unit? bne CNVB20 Branch if so rts  page*******  Subroutine Time** Return Time Of Day*TIME equ * ldx CLKPRT,PCR Get clock port address pshs CC Save masks orcc #IRQMask+FIRQMask Set interrupt masksTIME10 lda Second,X get second sta D.SEC Set second lda Minute,X get minute sta D.MIN Set minute lda Hour,X Get hour sta D.HOUR Set hour lda DayMonth,X Get day sta D.DAY Set day lda Month,X get month sta D.Month Set month lda RollOver,X Check for rollover rora bcs TIME10 Branch if so puls CC Retrieve interrupt masks ldx #D.Month Get date ptrTIME20 lda 0,X Get bcd byte anda #$F0 Get msn tfr A,B Copy it eora 0,X Get lsn sta 0,X Save it lsrb ADJUST Msn lsrb lsrb lsrb lda #10 mul addb 0,X Add lsn stb ,X+ Save converted byte cmpx #D.SEC+1 bcs TIME20* ldx R$X,U Get specified location ldd D.YEAR Get year & month std 0,X ldd D.DAY Get day & hour std 2,X ldd D.MIN Get minute & second std 4,X clrb Clear Carry rts emodClkEnd equ * opt c end